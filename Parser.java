
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\006\011\000\002\007\011\000\002\010\013\000\002" +
    "\011\014\000\002\012\003\000\002\012\005\000\002\012" +
    "\002\000\002\013\005\000\002\014\004\000\002\014\003" +
    "\000\002\015\007\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\006\000\002\020\014\000\002\020\011\000\002\021\011" +
    "\000\002\022\011\000\002\023\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\006\000\002" +
    "\026\007\000\002\027\007\000\002\030\006\000\002\030" +
    "\005\000\002\031\004\000\002\032\005\000\002\032\002" +
    "\000\002\005\003\000\002\005\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\036\006\000" +
    "\002\037\003\000\002\037\003\000\002\040\003\000\002" +
    "\040\003\000\002\041\004\000\002\041\003\000\002\042" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\026\004\011\007\036\010\007\011\023\014" +
    "\025\016\031\021\015\022\030\023\022\051\026\001\002" +
    "\000\042\002\uffe8\004\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\051\uffe8\001\002\000\030\002" +
    "\ufffb\004\ufffb\007\ufffb\010\ufffb\011\ufffb\014\ufffb\016\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\051\ufffb\001\002\000\042\002" +
    "\uffea\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\051\uffea\001\002\000\004\051\230\001\002" +
    "\000\004\002\227\001\002\000\006\024\042\025\041\001" +
    "\002\000\042\002\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\051\uffe6\001\002\000\030" +
    "\002\ufff9\004\ufff9\007\ufff9\010\ufff9\011\ufff9\014\ufff9\016" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\051\ufff9\001\002\000\004" +
    "\002\000\001\002\000\004\035\177\001\002\000\042\002" +
    "\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\051\uffe9\001\002\000\042\002\uffeb\004\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\051\uffeb\001\002\000\042\002\uffed\004\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\020\uffed\021\uffed\022\uffed\023\uffed\051\uffed\001" +
    "\002\000\030\002\ufffe\004\011\007\036\010\007\011\023" +
    "\014\025\016\031\021\015\022\030\023\022\051\026\001" +
    "\002\000\004\051\166\001\002\000\004\035\154\001\002" +
    "\000\042\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\051\uffec\001\002\000\004\035" +
    "\146\001\002\000\010\026\143\035\103\045\102\001\002" +
    "\000\030\002\ufffa\004\ufffa\007\ufffa\010\ufffa\011\ufffa\014" +
    "\ufffa\016\ufffa\021\ufffa\022\ufffa\023\ufffa\051\ufffa\001\002" +
    "\000\004\035\137\001\002\000\016\007\036\030\047\035" +
    "\057\047\061\050\051\051\046\001\002\000\030\002\ufffc" +
    "\004\ufffc\007\ufffc\010\ufffc\011\ufffc\014\ufffc\016\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\051\ufffc\001\002\000\030\002\ufffd" +
    "\004\ufffd\007\ufffd\010\ufffd\011\ufffd\014\ufffd\016\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\051\ufffd\001\002\000\042\002\uffe7" +
    "\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\051\uffe7\001\002\000\004\026\120\001\002\000" +
    "\004\051\037\001\002\000\004\040\040\001\002\000\006" +
    "\024\042\025\041\001\002\000\014\026\uffd3\036\uffd3\042" +
    "\uffd3\044\uffd3\051\uffd3\001\002\000\014\026\uffd4\036\uffd4" +
    "\042\uffd4\044\uffd4\051\uffd4\001\002\000\004\026\044\001" +
    "\002\000\014\030\047\035\057\047\061\050\051\051\046" +
    "\001\002\000\024\017\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\036\uffc1\037\uffc1\041\uffc1\042\uffc1\001\002\000\030" +
    "\017\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\103\036" +
    "\uffcf\037\uffcf\041\uffcf\042\uffcf\045\102\001\002\000\004" +
    "\047\101\001\002\000\024\017\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\001\002" +
    "\000\024\017\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036" +
    "\uffbe\037\uffbe\041\uffbe\042\uffbe\001\002\000\024\017\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\037\uffd0\041" +
    "\uffd0\042\uffd0\001\002\000\024\017\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2\001" +
    "\002\000\030\017\uffd2\027\076\030\075\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\001" +
    "\002\000\024\017\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\036\uffce\037\uffce\041\uffce\042\uffce\001\002\000\014\031" +
    "\065\032\063\033\066\034\067\041\074\001\002\000\014" +
    "\030\047\035\057\047\061\050\051\051\046\001\002\000" +
    "\024\017\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1" +
    "\037\uffd1\041\uffd1\042\uffd1\001\002\000\024\017\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf\041\uffbf" +
    "\042\uffbf\001\002\000\014\031\065\032\063\033\066\034" +
    "\067\036\064\001\002\000\014\030\047\035\057\047\061" +
    "\050\051\051\046\001\002\000\030\017\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca" +
    "\041\uffca\042\uffca\001\002\000\014\030\047\035\057\047" +
    "\061\050\051\051\046\001\002\000\014\030\047\035\057" +
    "\047\061\050\051\051\046\001\002\000\014\030\047\035" +
    "\057\047\061\050\051\051\046\001\002\000\024\017\uffc6" +
    "\031\065\032\063\033\uffc6\034\uffc6\036\uffc6\037\uffc6\041" +
    "\uffc6\042\uffc6\001\002\000\024\017\uffc7\031\065\032\063" +
    "\033\uffc7\034\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\001" +
    "\002\000\024\017\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\036\uffc9\037\uffc9\041\uffc9\042\uffc9\001\002\000\024\017" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8" +
    "\041\uffc8\042\uffc8\001\002\000\032\002\ufff8\004\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\051\ufff8\001\002\000\004\035\057\001" +
    "\002\000\004\035\057\001\002\000\030\017\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037" +
    "\uffcc\041\uffcc\042\uffcc\001\002\000\030\017\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb\037" +
    "\uffcb\041\uffcb\042\uffcb\001\002\000\024\017\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\041\uffc0\042" +
    "\uffc0\001\002\000\006\052\115\053\114\001\002\000\016" +
    "\030\047\035\057\036\105\047\061\050\051\051\046\001" +
    "\002\000\004\036\113\001\002\000\064\002\uffd8\004\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8\037" +
    "\uffd8\041\uffd8\042\uffd8\051\uffd8\001\002\000\016\031\065" +
    "\032\063\033\066\034\067\036\uffd5\042\107\001\002\000" +
    "\014\030\047\035\057\047\061\050\051\051\046\001\002" +
    "\000\004\036\uffd7\001\002\000\016\031\065\032\063\033" +
    "\066\034\067\036\uffd5\042\107\001\002\000\004\036\uffd6" +
    "\001\002\000\064\002\uffd9\004\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9" +
    "\051\uffd9\001\002\000\004\046\uffc3\001\002\000\004\046" +
    "\uffc4\001\002\000\004\046\117\001\002\000\026\017\uffc5" +
    "\026\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\037" +
    "\uffc5\041\uffc5\042\uffc5\001\002\000\014\030\047\035\057" +
    "\047\061\050\051\051\046\001\002\000\014\031\065\032" +
    "\063\033\066\034\067\041\122\001\002\000\042\002\uffdc" +
    "\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\051\uffdc\001\002\000\004\017\126\001\002\000" +
    "\004\017\uffe0\001\002\000\014\017\uffdf\031\065\032\063" +
    "\033\066\034\067\001\002\000\016\010\007\030\047\035" +
    "\057\047\061\050\051\051\046\001\002\000\004\037\uffde" +
    "\001\002\000\004\037\132\001\002\000\014\031\065\032" +
    "\063\033\066\034\067\037\uffdd\001\002\000\016\011\023" +
    "\014\025\016\031\021\015\022\030\051\026\001\002\000" +
    "\004\020\136\001\002\000\030\006\uffef\011\023\012\uffef" +
    "\013\uffef\014\025\015\uffef\016\031\020\uffef\021\015\022" +
    "\030\051\026\001\002\000\014\006\ufff0\012\ufff0\013\ufff0" +
    "\015\ufff0\020\ufff0\001\002\000\042\002\uffe1\004\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\051" +
    "\uffe1\001\002\000\014\030\047\035\057\047\061\050\051" +
    "\051\046\001\002\000\014\031\065\032\063\033\066\034" +
    "\067\036\141\001\002\000\004\041\142\001\002\000\042" +
    "\002\uffda\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\051\uffda\001\002\000\014\030\047\035" +
    "\057\047\061\050\051\051\046\001\002\000\014\031\065" +
    "\032\063\033\066\034\067\041\145\001\002\000\042\002" +
    "\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\051\uffe5\001\002\000\014\030\047\035\057" +
    "\047\061\050\051\051\046\001\002\000\014\031\065\032" +
    "\063\033\066\034\067\036\150\001\002\000\004\037\151" +
    "\001\002\000\016\011\023\014\025\016\031\021\015\022" +
    "\030\051\026\001\002\000\004\015\153\001\002\000\042" +
    "\002\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\051\uffe2\001\002\000\014\030\047\035" +
    "\057\047\061\050\051\051\046\001\002\000\014\031\065" +
    "\032\063\033\066\034\067\036\156\001\002\000\004\037" +
    "\157\001\002\000\016\011\023\014\025\016\031\021\015" +
    "\022\030\051\026\001\002\000\006\012\162\013\161\001" +
    "\002\000\042\002\uffe3\004\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\051\uffe3\001\002\000\004" +
    "\037\163\001\002\000\016\011\023\014\025\016\031\021" +
    "\015\022\030\051\026\001\002\000\004\013\165\001\002" +
    "\000\042\002\uffe4\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\051\uffe4\001\002\000\004\026" +
    "\167\001\002\000\004\043\170\001\002\000\006\024\042" +
    "\025\041\001\002\000\004\042\172\001\002\000\006\024" +
    "\042\025\041\001\002\000\004\044\174\001\002\000\004" +
    "\041\175\001\002\000\030\002\ufff6\004\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\014\ufff6\016\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\051\ufff6\001\002\000\004\002\uffff\001\002\000\006\024" +
    "\042\025\041\001\002\000\004\036\201\001\002\000\004" +
    "\041\202\001\002\000\042\002\uffdb\004\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\051\uffdb\001" +
    "\002\000\004\051\204\001\002\000\004\035\205\001\002" +
    "\000\006\036\ufff2\051\210\001\002\000\004\036\215\001" +
    "\002\000\006\036\ufff4\042\213\001\002\000\004\040\211" +
    "\001\002\000\006\024\042\025\041\001\002\000\006\036" +
    "\ufff1\042\ufff1\001\002\000\006\036\ufff2\051\210\001\002" +
    "\000\004\036\ufff3\001\002\000\004\037\216\001\002\000" +
    "\016\011\023\014\025\016\031\021\015\022\030\051\026" +
    "\001\002\000\004\006\221\001\002\000\004\005\226\001" +
    "\002\000\004\035\222\001\002\000\014\030\047\035\057" +
    "\047\061\050\051\051\046\001\002\000\014\031\065\032" +
    "\063\033\066\034\067\036\224\001\002\000\004\041\225" +
    "\001\002\000\004\005\uffee\001\002\000\030\002\ufff5\004" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\014\ufff5\016\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\051\ufff5\001\002\000\004\002\001\001" +
    "\002\000\004\040\231\001\002\000\006\024\042\025\041" +
    "\001\002\000\004\026\233\001\002\000\014\030\047\035" +
    "\057\047\061\050\051\051\046\001\002\000\014\031\065" +
    "\032\063\033\066\034\067\041\235\001\002\000\032\002" +
    "\ufff7\004\ufff7\007\ufff7\010\ufff7\011\ufff7\014\ufff7\016\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\037\ufff7\051\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\044\002\007\003\013\004\020\006\032\007" +
    "\031\010\004\011\026\016\012\017\017\020\023\021\016" +
    "\022\005\025\015\026\003\027\033\030\011\036\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\175\004\020\006\032\007\031" +
    "\010\004\011\026\016\012\017\017\020\023\021\016\022" +
    "\005\025\015\026\003\027\033\030\011\036\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\123\023\122\030\051\033\124\034" +
    "\053\035\057\036\054\040\047\041\052\042\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\051\033\055\034\053\035\057" +
    "\036\054\040\047\041\052\042\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\030\051\033\061\034\053\035\057\036\054\040\047\041" +
    "\052\042\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\030\051\033\072\034\053\035" +
    "\057\036\054\040\047\041\052\042\044\001\001\000\002" +
    "\001\001\000\022\030\051\033\071\034\053\035\057\036" +
    "\054\040\047\041\052\042\044\001\001\000\022\030\051" +
    "\033\070\034\053\035\057\036\054\040\047\041\052\042" +
    "\044\001\001\000\022\030\051\033\067\034\053\035\057" +
    "\036\054\040\047\041\052\042\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\077\001\001\000\004\034" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\115\001\001\000\024\030\051\031" +
    "\103\033\105\034\053\035\057\036\054\040\047\041\052" +
    "\042\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\107\001\001\000\022\030\051\033\110\034\053" +
    "\035\057\036\054\040\047\041\052\042\044\001\001\000" +
    "\002\001\001\000\004\032\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\051\033\120" +
    "\034\053\035\057\036\054\040\047\041\052\042\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\126\024" +
    "\127\030\051\033\130\034\053\035\057\036\054\040\047" +
    "\041\052\042\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\132\016\133\017\017" +
    "\020\023\021\016\022\005\025\015\026\003\027\033\030" +
    "\011\036\034\001\001\000\002\001\001\000\030\014\134" +
    "\016\133\017\017\020\023\021\016\022\005\025\015\026" +
    "\003\027\033\030\011\036\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\030\051\033\137\034\053\035" +
    "\057\036\054\040\047\041\052\042\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\030" +
    "\051\033\143\034\053\035\057\036\054\040\047\041\052" +
    "\042\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\030\051\033\146\034\053\035\057\036\054\040\047" +
    "\041\052\042\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\151\016\133\017\017\020\023\021\016" +
    "\022\005\025\015\026\003\027\033\030\011\036\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\051" +
    "\033\154\034\053\035\057\036\054\040\047\041\052\042" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\014\157\016\133\017\017\020\023\021\016\022\005\025" +
    "\015\026\003\027\033\030\011\036\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\163\016\133\017\017\020\023\021\016\022\005\025\015" +
    "\026\003\027\033\030\011\036\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\170\001\001\000\002\001\001\000\004\005" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\205\013\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\211\001\001\000\002\001\001\000\006\012" +
    "\213\013\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\216\016\133\017\017\020\023\021\016\022" +
    "\005\025\015\026\003\027\033\030\011\036\034\001\001" +
    "\000\004\015\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\051\033\222\034\053\035\057\036\054" +
    "\040\047\041\052\042\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\231\001\001\000" +
    "\002\001\001\000\022\030\051\033\233\034\053\035\057" +
    "\036\054\040\047\041\052\042\044\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= DECL P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= VAR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= CONS_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= TUPLA_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= FUNC_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VAR_DECL ::= val id double_colon TIPO assign EXP semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONS_DECL ::= con id double_colon TIPO assign EXP semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONS_DECL",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TUPLA_DECL ::= tuple id assign lbrace TIPO comma TIPO rbrace semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_DECL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC_DECL ::= fnct TIPO id lparen PARAM_LIST rparen colon COS FINAL_RTN endfnct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAM_LIST ::= PARAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAM_LIST ::= PARAM comma PARAM_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAM_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAM ::= id double_colon TIPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COS ::= SENT COS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COS ::= SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FINAL_RTN ::= rtrn lparen EXP rparen semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FINAL_RTN",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= ASIG_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= IF_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= WHILE_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= FOR_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= TUPLA_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= ENTR_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENT ::= SAL_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= CRID_FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIG_SENT ::= id assign EXP semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_SENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF_SENT ::= if lparen EXP rparen colon COS else colon COS endif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF_SENT ::= if lparen EXP rparen colon COS endif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WHILE_SENT ::= while lparen EXP rparen colon COS endwhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR_SENT ::= for FORINIT to FORLIMIT colon COS endfor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FORINIT ::= VAR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORINIT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FORINIT ::= EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORINIT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FORLIMIT ::= CONS_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORLIMIT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FORLIMIT ::= EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORLIMIT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TUPLA_ASSIGN ::= TUPLA_ACCESS assign EXP semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_ASSIGN",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENTR_SENT ::= in lparen TIPO rparen semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTR_SENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SAL_SENT ::= out lparen EXP rparen semicolon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SAL_SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CRID_FUNC ::= id lparen ARGS rparen 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CRID_FUNC ::= id lparen rparen 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARGS ::= EXP ARGS_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARGS_LIST ::= comma EXP ARGS_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_LIST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARGS_LIST ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_LIST",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= integer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= logical 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= ARIT_TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= LOG_TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= CRID_FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= TUPLA_ACCESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARIT_TERM ::= ARIT_TERM plus ARIT_TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARIT_TERM ::= ARIT_TERM minus ARIT_TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARIT_TERM ::= lparen EXP rparen 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOG_TERM ::= EXP equal EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOG_TERM ::= EXP not_equal EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOG_TERM ::= EXP and EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOG_TERM ::= EXP or EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TUPLA_ACCESS ::= id lbracket TUPLA_INDEX rbracket 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_ACCESS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TUPLA_INDEX ::= zero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_INDEX",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TUPLA_INDEX ::= one 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_INDEX",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LIT ::= ENT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LIT ::= BOL_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENT_LIT ::= minus integer_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENT_LIT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENT_LIT ::= integer_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENT_LIT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOL_LIT ::= boolean_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOL_LIT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
