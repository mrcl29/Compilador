package compilador.sintactic;
/**
 * parser.cup
 *
 * Assignatura 21780 - Compiladors
 * Estudis: Grau en Informàtica
 *
 * Marc Llobera Villalonga
 */

import java_cup.runtime.*;
import java.util.*;

action code
{:
    //public PilaSemantica pilaSemantica = new PilaSemantica();
    //public PilaSemantica pilaSemantica_2 = new PilaSemantica();

    public boolean dadesGlobals = true;
:}

parser code {:
    @Override
    protected int error_sync_size(){
        return 1;
    }

    private Symbol error;
    public boolean hiHaErrors = false;

    /**
    * Método al que se llama automáticamente ante algún error sintáctico.
    **/
    public void syntax_error(Symbol s) {
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna " + s.right + ". No se esperaba este componente: " + s.value + ".");
        throw new RuntimeException("Error sintáctico detectado. Terminando análisis.");
    }

    /**
    * Método al que se llama automáticamente ante algún error sintáctico
    * en el que ya no es posible una recuperación de errores.
    **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintáctico irrecuperable en la Línea " +
        (s.left) + " Columna " + s.right + ". Componente " + s.value + " no reconocido.");
        throw new RuntimeException("Error sintáctico irrecuperable. Terminando análisis.");
    }
:}

/* Definición de terminales (tokens) */
terminal fnct, endfnct, rtrn, val, con, if_t, else_t, endif, while_t, endwhile, for_t, to, endfor, in, out, tuple;
terminal integer, logical;
terminal assign, plus, minus, equal, not_equal, and, or;
terminal lparen, rparen, colon, double_colon, semicolon, comma, lbrace, rbrace, lbracket, rbracket;
terminal index_literal, integer_literal, boolean_literal, id;

/* No terminales */
non terminal S, P, DECL, VAR_DECL, CONS_DECL, TUPLA_DECL, FUNC_DECL, PARAM_LIST, PARAM, COS, FINAL_RTN, SENT;
non terminal ASIG_SENT, IF_SENT, WHILE_SENT, FOR_SENT, FORINIT, FORLIMIT, TUPLA_ASSIGN, ENTR_SENT, SAL_SENT, CRID_FUNC, ARGS, ARGS_LIST;
non terminal TIPO, EXP, ARIT_TERM, ARIT_FACTOR, ARIT_TERM_REST, LOG_TERM, TUPLA_ACCESS, LIT, POS_ENT_LIT, NEG_ENT_LIT, BOL_LIT, OUT_EXP, ENTR_FUNC, SAL_FUNC;

/* Precedencia y asociatividad */
precedence left and, or;        // Menor precedencia
precedence left equal, not_equal; // Operadores relacionales === y /=
precedence left plus, minus;      // Operadores aritméticos + y -

/* Símbolo inicial */
start with S;

/* Reglas de gramática */

S ::= P ;

P ::= DECL P
  | DECL ;

DECL ::= VAR_DECL
      | CONS_DECL
      | TUPLA_DECL
      | FUNC_DECL
      | SENT ;

VAR_DECL ::= val id double_colon TIPO assign EXP semicolon ;

CONS_DECL ::= con id double_colon TIPO assign EXP semicolon ;

TUPLA_DECL ::= tuple id assign lbrace TIPO comma TIPO rbrace semicolon ;

FUNC_DECL ::= fnct TIPO id lparen PARAM_LIST rparen colon COS FINAL_RTN endfnct
            | fnct TIPO id lparen PARAM_LIST rparen colon FINAL_RTN endfnct
            ;

PARAM_LIST ::= PARAM
             | PARAM comma PARAM_LIST
             | /* epsilon */ ;

PARAM ::= id double_colon TIPO ;

COS ::= SENT COS
     | SENT ;

FINAL_RTN ::= rtrn lparen EXP rparen semicolon ;

SENT ::= ASIG_SENT
      | IF_SENT
      | WHILE_SENT
      | FOR_SENT
      | TUPLA_ASSIGN
      | ENTR_SENT
      | SAL_SENT
      | CRID_FUNC ;

ASIG_SENT ::= id assign EXP semicolon ;

IF_SENT ::= if_t lparen EXP rparen colon COS else_t colon COS endif
         | if_t lparen EXP rparen colon COS endif ;

WHILE_SENT ::= while_t lparen EXP rparen colon COS endwhile ;

FOR_SENT ::= for_t FORINIT to FORLIMIT colon COS endfor ;

FORINIT ::= VAR_DECL
         | EXP ;

FORLIMIT ::= CONS_DECL
           | EXP ;

TUPLA_ASSIGN ::= TUPLA_ACCESS assign EXP semicolon ;

ENTR_SENT ::= in lparen TIPO rparen semicolon ;

SAL_SENT ::= out lparen OUT_EXP rparen semicolon ;

ENTR_FUNC ::= in lparen TIPO rparen ;

SAL_FUNC ::= out lparen OUT_EXP rparen ;

OUT_EXP ::= id
          | CRID_FUNC
          | ARIT_TERM
          | LOG_TERM ;

CRID_FUNC ::= id lparen ARGS rparen
           | id lparen rparen ;

ARGS ::= EXP ARGS_LIST ;

ARGS_LIST ::= comma EXP ARGS_LIST
            | /* epsilon */ ;

TIPO ::= integer
       | logical ;

EXP ::= LOG_TERM
     | ARIT_TERM
     | CRID_FUNC
     | id
     | TUPLA_ACCESS
     | LIT
     | ENTR_FUNC
     | SAL_FUNC ;

ARIT_TERM ::= ARIT_FACTOR ARIT_TERM_REST ;

ARIT_TERM_REST ::= plus ARIT_FACTOR ARIT_TERM_REST
                 | minus ARIT_FACTOR ARIT_TERM_REST
                 | /* epsilon */ ;

ARIT_FACTOR ::= lparen EXP rparen
              | POS_ENT_LIT ;

LOG_TERM ::= EXP equal EXP
           | EXP not_equal EXP
           | EXP and EXP
           | EXP or EXP ;

TUPLA_ACCESS ::= id lbracket index_literal rbracket ;

LIT ::= NEG_ENT_LIT
     | BOL_LIT ;

POS_ENT_LIT ::= integer_literal ;

NEG_ENT_LIT ::= minus integer_literal ;

BOL_LIT ::= boolean_literal ;
