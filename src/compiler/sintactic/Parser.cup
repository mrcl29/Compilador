package compiler.sintactic;
/**
 * parser.cup
 *
 * Assignatura 21780 - Compiladors
 * Estudis: Grau en Informàtica
 *
 * Marc Llobera Villalonga
 */

import java.lang.Exception;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import compiler.sintactic.Symbols.*;
import compiler.c3a.*;

class Parser;

parser code {:
    public boolean DEBUG = false;

    TaulaSimbols taulaSimbols = new TaulaSimbols();

    public boolean error_detectat = false;

    public void print_this(Object msg){
        if(DEBUG){
            System.out.println(msg);
        }
    }

    String global = "Global";
    String ambit = global;

    GenerarCodi c3a = new GenerarCodi();

    int nbytes = 4;
    String buit = "";

    /**************************************************************
    ************************ GESTIÓ ERRORS ************************
    **************************************************************/

    @Override
    public void syntax_error(Symbol s) {
        report_error("Error sintáctico", s);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        report_error("Error sintáctico inrrecuperable", s);
        done_parsing();
    }

    @Override
    public void report_error(String t, Object info) {
        print_this("Reportando error...");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();

            print_error("Error en la linea " + l.getLine() + " y columna " + l.getColumn() + ": " + info.toString() + " --> " + t);
        }else{
            print_error("info no es Symbol en report_error");
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error fatal ("+message+")", info);
        done_parsing();
    }

    /**
    * Mètode per mostrar un error semàntic
    **/
    public void semantic_error(String t, Object info){
        if(info instanceof Simbol){
            Simbol token = (Simbol) info;

            print_error("Error semántico en la linea " + token.getFila() + " y columna " + token.getColumna() + " --> " + t);
        }else{
            print_error("info no es Symbol en semantic_error");
        }
        done_parsing();
    }

    /**
    * Mètode per mostrar un error
    **/
    public void print_error(String msg){
        error_detectat = true;
        System.err.println("Error--> " + msg);
        done_parsing();
    }
:}

/* Definición de terminales (tokens) */
terminal Simbol fnct, endfnct, rtrn, val, con, if_t, else_t, endif, while_t, endwhile, for_t, to, endfor, in, out, tuple;
terminal Simbol integer, logical;
terminal Simbol assign, plus, minus, equal, not_equal, and, or;
terminal Simbol lparen, rparen, colon, double_colon, semicolon, comma, lbrace, rbrace, lbracket, rbracket;
terminal Simbol integer_literal;
terminal Simbol boolean_literal;
terminal Simbol id;

/* No terminales */
non terminal S, P, DECL, VAR_DECL, CONS_DECL, TUPLA_DECL, SENT;
non terminal FUNC_DECL, FUNCINIT, MF, PARAM_LIST, PARAM, COS, FINAL_RTN;
non terminal CRID_FUNC, ARGS, ARGS_LIST;
non terminal ASIG_SENT;
non terminal IF_SENT, IF_ELSE, IF_INIT;
non terminal WHILE_SENT, WHILE_REP, MW;
non terminal FOR_SENT, FORINIT;
non terminal SAL_SENT;
non terminal TIPO, EXP, CRID_SIMB, ARIT_TERM, LOG_TERM, TUPLA_ACCESS, LIT, ENT_LIT, POS_ENT_LIT, BOL_LIT, ENT_SENT;

/* Precedencia y asociatividad */
precedence left and, or;
precedence left equal, not_equal; // Operadores relacionales === y /=
precedence left plus, minus;      // Operadores aritméticos + y -

/* Símbolo inicial */
start with S;

/* Reglas de gramática */

S ::= P {:  c3a.tancar(); c3a.escriureTaulaSimbols(taulaSimbols.toString()); c3a.generarCodi(); done_parsing(); :};

P ::= SENT P
    | FUNC_DECL P
    | /* epsilon */;

SENT ::= DECL
       | ASIG_SENT
       | IF_SENT
       | WHILE_SENT
       | FOR_SENT
       | SAL_SENT
       | CRID_FUNC
       ;

COS ::= SENT COS
      | SENT
      ;

DECL ::= VAR_DECL
       | CONS_DECL
       | TUPLA_DECL
       ;

ASIG_SENT ::= id:vid assign EXP:vE semicolon
{:
    print_this("Estas en ASIG_SENT para símbolo");
    if(!error_detectat){
        Simbol aux = (Simbol) vid;
        VariableConstant id = taulaSimbols.usarVariableConstant(vid.getValue(), ambit);
        id.setFila(aux.getFila());
        id.setColumna(aux.getColumna());
        print_this("Usanto variable/constante "+id.getValue().toString()+" con el ámbito "+ ambit);
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico ASIG_SENT");
            String e = ("Valor no asignado");
            semantic_error(e, vE);
        }else{
            if(id.getValue() != ""){
                if(!id.isEsConstant()){
                    if(id.getTipus() != E.getTipus()){
                        print_this("Error semántico ASIG_SENT");
                        String e = ("Se está intentando asignar un tipo incorrecto a la variable " + vid.getValue());
                        semantic_error(e, vE);
                    }else{
                        id.setValor(E.getValor());

                        c3a.genera("copy", E.getR(), buit, id.getR()); // copy R.r = E.r

                        RESULT = id;
                    }
                }else{
                    print_this("Error semántico ASIG_SENT");
                    String e = ("Se esta intentando asignar un nuevo valor a la constante " + vid.getValue());
                    semantic_error(e, vid);
                }
            }else{
                print_this("Error semántico ASIG_SENT");
                String e = ("La variable " + vid.getValue() + " no ha sido declarada");
                semantic_error(e, vid);
            }
        }
    }
:}
            | TUPLA_ACCESS:vTUPLA_ACCESS assign EXP:vE semicolon
{:
    print_this("Estas en ASIG_SENT para tupla");
    if(!error_detectat){
        Tupla TUPLA_ACCESS = (Tupla) vTUPLA_ACCESS;
        Simbol E = (Simbol) vE;
        print_this("Asignando valor a Tupla: "+ TUPLA_ACCESS.getValue());
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico ASIG_SENT");
            String e = ("Valor no asignado");
            semantic_error(e, vE);
        }else{
            if(TUPLA_ACCESS.getTipus() != E.getTipus()){
                print_this("Error semántico ASIG_SENT");
                String e = ("A la tupla " + TUPLA_ACCESS.getValue() + " se le esta asignando un tipo incorrecto.");
                semantic_error(e, vE);
            }else{
                if(TUPLA_ACCESS.getRef() == 0){
                    TUPLA_ACCESS.setVal1(E.getValor());
                }else{
                    TUPLA_ACCESS.setVal2(E.getValor());
                }

                c3a.genera("ind_ass", E.getR(), TUPLA_ACCESS.getD(), TUPLA_ACCESS.getR());

                RESULT = TUPLA_ACCESS;
            }
        }
    }
:}
;

IF_SENT ::= IF_ELSE:vIF_ELSE COS endif //if else
{:
    print_this("Estas en IF_SENT con else");
    if(!error_detectat){
        Simbol IF_ELSE = (Simbol) vIF_ELSE;

        c3a.genera("skip", buit, buit, IF_ELSE.getEtiqueta()); //efi: skip
    }
:}
          | IF_INIT:vIF_INIT COS endif //if
{:
    print_this("Estas en IF_SENT sin else");
    if(!error_detectat){
        Simbol IF_INIT = (Simbol) vIF_INIT;

        c3a.genera("skip", buit, buit, IF_INIT.getEtiqueta()); //efi: skip
    }
:}
;

IF_ELSE ::= IF_INIT:vIF_INIT COS else_t colon
{:
    print_this("Estas en IF_ELSE");
    if(!error_detectat){
        Simbol IF_INIT = (Simbol) vIF_INIT;

        String efi = c3a.novaetiqueta();
        c3a.genera("goto", buit, buit, efi);                  //goto efi
        c3a.genera("skip", buit, buit, IF_INIT.getEtiqueta()); //e: skip
        IF_INIT.setEtiqueta(efi);

        RESULT = IF_INIT;
    }
:}
;

IF_INIT ::= if_t lparen EXP:vE rparen colon
{:
    print_this("Estas en IF_INIT");
    if(!error_detectat){
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico IF_INIT");
            String e = ("Debes asignar una condición al if");
            semantic_error(e, vE);
        }else{
            if(E.getTipus() != TipusDades.BOOLEAN){
                print_this("Error semántico IF_INIT");
                String e = ("La condición de la sentencia 'if' no es correcta");
                semantic_error(e, vE);
            }else{

                String e = c3a.novaetiqueta();
                c3a.genera("if_EQ", E.getR(), "0", e); // if E.r=0 goto e
                E.setEtiqueta(e);

                RESULT = E;
            }
        }
    }
:}
;

WHILE_SENT ::= WHILE_REP:vWHILE_REP COS endwhile
{:
    print_this("Estas en WHILE_SENT");
    if(!error_detectat){
        Simbol WHILE_REP = (Simbol) vWHILE_REP;

        c3a.genera("goto", buit, buit, WHILE_REP.getEtiqueta()); // goto WHILE_REP.ei
        c3a.genera("skip", buit, buit, WHILE_REP.getEtiquetafi()); // WHILE_REP.efi: skip
    }
:}
;

WHILE_REP ::= while_t lparen MW:vM EXP:vE rparen colon
{:
    print_this("Estas en WHILE_REP");
    if(!error_detectat){
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico WHILE_SENT");
            String e = ("Debes asignar una condición al bucle");
            semantic_error(e, vE);
        }else{
            if(E.getTipus() != TipusDades.BOOLEAN){
                print_this("Error semántico WHILE_SENT");
                String e = ("La condición de la sentencia 'while' no es correcta");
                semantic_error(e, vE);
            }else{
                Simbol WHILE_REP = new Simbol();
                Simbol MW = (Simbol) vM;

                String efi = c3a.novaetiqueta();
                c3a.genera("if_EQ", E.getR(), "0", efi); // if E.r = 0 goto efi
                WHILE_REP.setEtiquetafi(efi);
                WHILE_REP.setEtiqueta(MW.getEtiqueta());

                RESULT = WHILE_REP;
            }
        }
    }
:}
;

MW ::= /* epsilon */
{:
    Simbol MW = new Simbol();

    String ei = c3a.novaetiqueta();
    c3a.genera("skip", buit, buit, ei); // ei: skip
    MW.setEtiqueta(ei);

    RESULT = MW;
:}
;

FOR_SENT ::= FORINIT:v1 COS endfor
{:
    print_this("Estas en FOR_SENT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;

        c3a.genera("goto", buit, buit, aux_v1.getEtiqueta());   // goto: ebucle
        c3a.genera("skip", buit, buit, aux_v1.getEtiquetafi()); // efi: skip
    }
:}
;

FORINIT ::= for_t PARAM:v1 assign EXP:v2 to EXP:v3 colon
{:
    print_this("Estas en FORINIT");
    if(!error_detectat){
        VariableConstant aux_v1 = (VariableConstant) v1;
        Simbol aux_v2 = (Simbol) v2;
        Simbol aux_v3 = (Simbol) v3;
        if(aux_v1.getTipus() != TipusDades.INTEGER){
            print_this("Error semántico FORINIT");
            String e = ("La condición init de la sentencia 'for' no es correcta");
            semantic_error(e, v1);
        }else if(aux_v3.getTipus() != TipusDades.INTEGER){
            print_this("Error semántico FORINIT");
            String e = ("La condición limit de la sentencia 'for' no es correcta");
            semantic_error(e, v3);
        }else if(aux_v1.getTipus() != aux_v2.getTipus()){
            print_this("Error semántico FORINIT");
            String e = ("Estas asignando un tipo incorrecto al parámetro del bucle for");
            semantic_error(e, v2);
        }else{
            aux_v1.setValor(aux_v2.getValor());

            String t1 = c3a.novavar(aux_v1);
            String t2 = c3a.novavar(aux_v3);
            String t3 = c3a.novavar(aux_v3);
            String ebucle = c3a.novaetiqueta();
            String einici = c3a.novaetiqueta();
            String efi = c3a.novaetiqueta();
            c3a.genera("copy", aux_v2.getR(), buit, t1); // t1 = INIT
            c3a.genera("goto", buit, buit, einici);      // goto: einici
            c3a.genera("skip", buit, buit, ebucle);      // ebucle: skip
            c3a.genera("copy", aux_v3.getR(), buit, t2); // t2 = FINAL
            c3a.genera("copy", "1", buit, t3);           // t3 = 1
            c3a.genera("add", t1, t3, t1);               // t1 = t1 + 1
            c3a.genera("if_GE", t1, t2, efi);            // if t1 => t2 goto efi
            c3a.genera("skip", buit, buit, einici);      // einici: skip

            aux_v1.setR(t1);
            aux_v1.setEtiqueta(ebucle);
            aux_v1.setEtiquetafi(efi);
            RESULT = aux_v1;
        }
    }
:}
;

FUNC_DECL ::= FUNCINIT:vFUNCINIT COS FINAL_RTN:vRTN endfnct
{:
    print_this("Estas en FUNC_DECL con cuerpo");
    if(!error_detectat){
        Simbol FUNCINIT = (Simbol) vFUNCINIT;
        Simbol RTN = (Simbol) vRTN;
        if(RTN.getTipus() != FUNCINIT.getTipus()){
            print_this("Error semántico FUNC_DECL");
            String e = ("El valor devuelto no corresponde con el tipo de la función.");
            semantic_error(e, vRTN);
        }else{

            c3a.genera("rtn", buit, buit, RTN.getR());
            c3a.genera("skip", buit, buit, FUNCINIT.getEtiquetafi());
            ambit = global;
            print_this("Nuevo ámbito: " + ambit);

        }
    }
:}
            | FUNCINIT:vFUNCINIT FINAL_RTN:vRTN endfnct
{:
    print_this("Estas en FUNC_DECL sin cuerpo");
    if(!error_detectat){
        Simbol FUNCINIT = (Simbol) vFUNCINIT;
        Simbol RTN = (Simbol) vRTN;
        if(RTN.getTipus() != FUNCINIT.getTipus()){
            print_this("Error semántico FUNC_DECL");
            String e = ("El valor devuelto no corresponde con el tipo de la función.");
            semantic_error(e, vRTN);
        }else{

            c3a.genera("rtn", buit, buit, RTN.getR());
            c3a.genera("skip", buit, buit, FUNCINIT.getEtiquetafi());
            ambit = global;
            print_this("Nuevo ámbito: " + ambit);
        }
    }
:}
;

FUNCINIT ::= MF:mf fnct TIPO:vTIPO id:vid lparen PARAM_LIST:vPARAM_LIST rparen colon
{:
    print_this("Estas en FUNCINIT con cuerpo");
    if(!error_detectat){
        print_this("Declarando Función: "+ vid.getValue());
        Simbol TIPO = (Simbol) vTIPO;
        Simbol id = (Simbol) vid;
        ArrayList<VariableConstant> PARAM_LIST = (ArrayList<VariableConstant>) vPARAM_LIST;

        Simbol MF = (Simbol) mf;

        Funcio funcio = new Funcio(id.getValue(), PARAM_LIST, TIPO.getTipus());
        error_detectat = !taulaSimbols.declararFuncio(funcio);
        if(error_detectat){
            print_this("Error semántico FUNCINIT");
            String e = ("Ya existe una función con el nombre '" + vid.getValue() + "'");
            semantic_error(e, vid);
        }else{
            print_this("Función '" + id.getValue() + " de tipo " + TIPO.getTipus().toString() + " creada con éxito");

            funcio.setEtiqueta(MF.getEtiqueta());
            funcio.setEtiquetafi(MF.getEtiquetafi());
            funcio.setR(MF.getR());

            RESULT = funcio;
        }
    }
:}
;

MF ::= /* epsilon */
{:
    Funcio MF = new Funcio();

    String e = c3a.novaetiqueta();
    MF.setEtiqueta(e);
    String np = c3a.nouproc(MF);
    ambit = np;
    print_this("Nuevo ámbito: " + ambit);
    String efi = c3a.novaetiqueta();
    c3a.genera("goto", buit, buit, efi);
    MF.setEtiquetafi(efi);
    c3a.genera("skip", buit, buit, e);
    MF.setR(np);

    RESULT = MF;

:}
;

PARAM_LIST ::= PARAM:v1
{:
    print_this("Estas en PARAM_LIST");
    if(!error_detectat){
        RESULT = new ArrayList<VariableConstant>(Arrays.asList((VariableConstant) v1));
    }
:}
             | PARAM:v1 comma PARAM_LIST:v2
{:
    print_this("Estas en PARAM_LIST");
    if(!error_detectat){
        VariableConstant aux_v1 = (VariableConstant) v1;
        ArrayList<VariableConstant> aux_v2 = (ArrayList<VariableConstant>) v2;
        aux_v2.add(0, aux_v1);
        RESULT = aux_v2;
    }
:}
             | /* epsilon */ {: print_this("Estas en PARAM_LIST epsilon"); RESULT = new ArrayList<VariableConstant>(); :}
             ;

PARAM ::= id:v1 double_colon TIPO:v2
{:
    print_this("Estas en PARAM");
    if(!error_detectat){
        print_this("Declarando Parámetro "+ v1.getValue());
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        VariableConstant varcon = new VariableConstant(v1.getValue(), aux_v2.getTipus(), false);
        varcon.setAmbit(ambit);
        print_this("Asignado el ámbito "+ ambit+ " al parámetro "+varcon.getValue().toString());
        error_detectat = !taulaSimbols.declararVariableConstant(varcon);
        if(error_detectat){
            print_this("Error semántico PARAM");
            String e = ("Ya existe una variable o constante con el nombre '" + v1.getValue() + "'");
            semantic_error(e, v1);
        }else{
            print_this("Parámetro '" + v1.getValue() + "' creado con éxito");

            String t = c3a.novavar(varcon);
            varcon.setR(t);

            RESULT = varcon;
        }
    }
:}
;

FINAL_RTN ::= rtrn lparen EXP:v1 rparen semicolon
{:
    print_this("Estas en FINAL_RTN con cuerpo");
    Simbol aux_v1 = (Simbol) v1;
    if(aux_v1.getTipus() == TipusDades.NULL){
        print_this("Error semántico FINAL_RTN");
        String e = ("No se ha devuelto ningún valor");
        semantic_error(e, v1);
    }else{
        RESULT = aux_v1;
    }
:}
;

SAL_SENT ::= out lparen EXP:vOUT rparen semicolon
{:
    print_this("Estas en SAL_SENT");
    Simbol OUT = (Simbol) vOUT;
    if(OUT.getTipus() == TipusDades.NULL){
        print_this("Error semántico SAL_SENT");
        String e = ("Salida vacía");
        semantic_error(e, vOUT);
    }else{
        String i;
        if(OUT.getTipus() == TipusDades.INTEGER){
            i = "1";
        }else{
            i = "2";
        }

        String efi = c3a.novaetiqueta();
        String d0 = c3a.novavar(OUT);
        c3a.genera("copy", i, buit, d0);
        String d1 = c3a.novavar(OUT);
        c3a.genera("copy", OUT.getR(), buit, d1);

        c3a.genera("out", d0, d1, efi); // Imprime d1 por consola, d0 indica si es integer o booleano, efi es para continuar despues de imprimir
    }
:}
;

CRID_FUNC ::= id:vid lparen ARGS:vARGS rparen
{:
    print_this("Estas en CRID_FUNC para argumentos");
    if(!error_detectat){
        print_this("Llamando a Función: "+ vid.getValue());
        Simbol aux = (Simbol) vid;
        Funcio id = taulaSimbols.usarFuncio(vid.getValue());
        id = (Funcio) id.clone();
        id.setFila(aux.getFila());
        id.setColumna(aux.getColumna());
        ArrayList<Simbol> ARGS = (ArrayList<Simbol>) vARGS;
        if(id.getValue() != ""){
            if(id.mateixosParametres(ARGS)){
                ArrayList<VariableConstant> px = id.getParametres();
                for(int i = 0; i < px.size(); i++){
                    c3a.genera("copy", ARGS.get(i).getR(), buit, px.get(i).getR());
                }
                String t = c3a.novavar(id);
                c3a.genera("call", t, buit, id.getEtiqueta());
                id.setR(t);

                RESULT = id;
            }else{
                print_this("Error semántico CRID_FUNC");
                String e = ("A la funcion " + vid.getValue() + " no se le estan pasando los parámetros correctos: "+ARGS.toString());
                semantic_error(e, vid);
            }
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + vid.getValue() + " no ha sido creada");
            semantic_error(e, vid);
        }
    }
:}
            | id:vid lparen rparen
{:
    print_this("Estas en CRID_FUNC sin argumentos");
    if(!error_detectat){
        print_this("Llamando a Función: "+ vid.getValue());
        Simbol aux = (Simbol) vid;
        Funcio id = taulaSimbols.usarFuncio(vid.getValue());
        id = (Funcio) id.clone();
        id.setFila(aux.getFila());
        id.setColumna(aux.getColumna());
        ArrayList<Simbol> aux_v2 = new ArrayList<Simbol>();
        if(id.getValue() != ""){
            if(id.mateixosParametres(aux_v2)){

                String t = c3a.novavar(id);
                c3a.genera("call", t, buit, id.getEtiqueta());
                id.setR(t);

                RESULT = id;
            }else{
                print_this("Error semántico CRID_FUNC");
                String e = ("A la funcion " + vid.getValue() + " no se le estan pasando los parámetros correctos: "+aux_v2.toString());
                semantic_error(e, vid);
            }
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + vid.getValue() + " no ha sido creada");
            semantic_error(e, vid);
        }
    }
:}
;

ARGS ::= EXP:vE ARGS_LIST:vARGS_LIST
{:
    print_this("Estas en ARGS");
    if(!error_detectat){
        Simbol E = (Simbol) vE;
        E = E.clone();
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico ARGS");
            String e = ("Argumento vacío");
            semantic_error(e, vE);
        }else{
            String t = c3a.novavar(E);
            c3a.genera("copy", E.getR(), buit, t);
            E.setR(t);

            ArrayList<Simbol> ARGS_LIST = (ArrayList<Simbol>) vARGS_LIST;
            ARGS_LIST.add(0, E);

            RESULT = ARGS_LIST;
        }
    }
:}
;

ARGS_LIST ::= comma EXP:vE ARGS_LIST:vARGS_LIST
{:
    print_this("Estas en ARGS_LIST");
    if(!error_detectat){
        Simbol E = (Simbol) vE;
        E = E.clone();
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico ARGS_LIST");
            String e = ("Argumento vacío");
            semantic_error(e, vE);
        }else{
            String t = c3a.novavar(E);
            c3a.genera("copy", E.getR(), buit, t);
            E.setR(t);

            ArrayList<Simbol> ARGS_LIST = (ArrayList<Simbol>) vARGS_LIST;
            ARGS_LIST.add(0, E);

            c3a.genera("param_s", buit, buit, E.getR());

            RESULT = ARGS_LIST;
        }
    }
:}
            | /* epsilon */ {: print_this("Estas en ARGS_LIST epsilon"); RESULT = new ArrayList<Simbol>(); :}
;

VAR_DECL ::= val id:vid double_colon TIPO:vTIPO assign EXP:vE semicolon
{:
    print_this("Estas en VAR_DECL");
    if(!error_detectat){
        print_this("Declarando Variable "+ vid.getValue());
        Simbol id = (Simbol) vid;
        Simbol TIPO = (Simbol) vTIPO;
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico VAR_DECL");
            String e = ("Valor no asignado");
            semantic_error(e, vE);
        }else{
            if(E.getTipus() != TIPO.getTipus()){
                print_this("Error semántico VAR_DECL");
                String e = ("A la variable " + id.getValue() + " de tipo " + TIPO.getTipus() + " no se le esta asignando un valor del tipo correcto: " + E.getTipus());
                semantic_error(e, vE);
            }else{
                VariableConstant varcon = new VariableConstant(id.getValue(), TIPO.getTipus(), false);
                varcon.setAmbit(ambit);
                print_this("Asignado el ámbito "+ ambit+ " a la variable "+varcon.getValue().toString());
                error_detectat = !taulaSimbols.declararVariableConstant(varcon);
                if(error_detectat){
                    print_this("Error semántico VAR_DECL");
                    String e = ("Ya existe una variable o constante con el nombre '" + varcon.getValue() + "'");
                    semantic_error(e, vid);
                }else{
                    print_this("Variable '" + varcon.getValue() + "' de tipo '" + varcon.getTipus() + "' creada con éxito");
                    varcon.setValor(E.getValor());

                    String t_id = c3a.novavar(varcon);
                    c3a.genera("copy", E.getR(), buit, t_id); // id.r = E.r

                    varcon.setR(t_id);
                    RESULT = varcon;
                }
            }
        }
    }
:}
;

CONS_DECL ::= con id:vid double_colon TIPO:vTIPO assign EXP:vE semicolon
{:
    print_this("Estas en CONS_DECL");
    if(!error_detectat){
        print_this("Declarando Variable "+ vid.getValue());
        Simbol id = (Simbol) vid;
        Simbol TIPO = (Simbol) vTIPO;
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico CONS_DECL");
            String e = ("Valor no asignado");
            semantic_error(e, vE);
        }else{
            if(E.getTipus() != TIPO.getTipus()){
                print_this("Error semántico VAR_DECL");
                String e = ("A la constante " + id.getValue() + " de tipo " + TIPO.getTipus() + " no se le esta asignando un valor del tipo correcto: " + E.getTipus());
                semantic_error(e, vE);
            }else{
                VariableConstant varcon = new VariableConstant(id.getValue(), TIPO.getTipus(), true);
                varcon.setAmbit(ambit);
                print_this("Asignado el ámbito "+ ambit+ " a la constante "+varcon.getValue().toString());
                error_detectat = !taulaSimbols.declararVariableConstant(varcon);
                if(error_detectat){
                    print_this("Error semántico VAR_DECL");
                    String e = ("Ya existe una variable o constante con el nombre '" + varcon.getValue() + "'");
                    semantic_error(e, vid);
                }else{
                    print_this("Constante '" + varcon.getValue() + "' creada con éxito");
                    varcon.setValor(E.getValor());

                    String t_id = c3a.novavar(varcon);
                    c3a.genera("copy", E.getR(), buit, t_id); // id.r = E.r

                    varcon.setR(t_id);
                    RESULT = varcon;
                }
            }
        }
    }
:}
;

TUPLA_DECL ::= tuple id:vid assign lbrace TIPO:vTIPO1 comma TIPO:vTIPO2 rbrace semicolon
{:
    print_this("Estas en TUPLA_DECL");
    if(!error_detectat){
        print_this("Declarando Tupla: "+ vid.getValue());
        Simbol id = (Simbol) vid;
        Simbol TIPO1 = (Simbol) vTIPO1;
        Simbol TIPO2 = (Simbol) vTIPO2;
        Tupla tupla = new Tupla(id.getValue(), TIPO1.getTipus(), TIPO2.getTipus());
        tupla.setAmbit(ambit);
        print_this("Asignado el ámbito "+ ambit+ " a la tupla "+tupla.getValue().toString());
        error_detectat = !taulaSimbols.declararTupla(tupla);
        if(error_detectat){
            print_this("Error semántico TUPLA_DECL");
            String e = ("Ya existe una tupla con el nombre '" + id.getValue() + "'");
            semantic_error(e, vid);
        }else{
            print_this("Tupla '" + id.getValue() + "["+ TIPO1.getTipus().toString() +", "+ TIPO2.getTipus().toString() +"]' creada con éxito");

            String t1 = c3a.novavar(tupla);
            tupla.setD("0");
            String t2 = c3a.novavar(tupla);
            tupla.setR(t1);

            RESULT = tupla;
        }
    }
:}
;

EXP ::= lparen EXP:v1 rparen {: print_this("Estas en (EXP)"); RESULT = v1; :}
      | LOG_TERM:v1     {: print_this("Estas en EXP termino lógico"); RESULT = v1; :}
      | ARIT_TERM:v1    {: print_this("Estas en EXP termino aritmético"); RESULT = v1; :}
      | CRID_SIMB:v1    {: print_this("Estas en EXP llamada a símbolo"); RESULT = v1; :}
      | LIT:v1          {: print_this("Estas en EXP llamada a literal"); RESULT = v1; :}
      | ENT_SENT:v1    {: print_this("Estas en EXP entrada de sistema"); RESULT = v1; :}
      ;

LIT ::= ENT_LIT:v1 {: print_this("Estas en LIT integer"); RESULT = v1; :}
      | BOL_LIT:v1 {: print_this("Estas en LIT booleano"); RESULT = v1; :}
      ;

ENT_LIT ::= POS_ENT_LIT:v1 {: print_this("Estas en ENT_LIT positivo"); RESULT = v1; :}
          | minus POS_ENT_LIT:v1
{:
    print_this("Estas en ENT_LIT negativo");
    Simbol aux_v1 = (Simbol) v1;
    aux_v1.setValor(-1*aux_v1.getValor());

    String t = c3a.novavar(aux_v1);
    c3a.genera("neg", aux_v1.getR(), buit, t);
    aux_v1.setR(t);

    RESULT = aux_v1;
:}
;

POS_ENT_LIT ::= integer_literal:v1
{:
    print_this("Positive integer");
    Simbol aux_v1 = (Simbol) v1;
    aux_v1.setValor((Integer) aux_v1.getValue());
    aux_v1.setValue("integer_literal");

    String t = c3a.novavar(aux_v1);
    c3a.genera("copy", String.valueOf(aux_v1.getValor()), buit, t);
    aux_v1.setR(t);

    RESULT = aux_v1;
:}
;

BOL_LIT ::= boolean_literal:v1
{:
    print_this("Boolean literal");
    Simbol aux_v1 = (Simbol) v1;
    if(aux_v1.getValue().toString().equals("TRUE") || aux_v1.getValue().toString().equals("true")){
        aux_v1.setValor(-1);
    }else{
        aux_v1.setValor(0);
    }

    String t = c3a.novavar(aux_v1);
    c3a.genera("copy", String.valueOf(aux_v1.getValor()), buit, t);
    aux_v1.setR(t);

    RESULT = aux_v1;
:}
;

TUPLA_ACCESS ::= id:vid lbracket integer_literal:vindex rbracket
{:
    print_this("Estas en TUPLA_ACCESS");
    if(!error_detectat){
        print_this("Accediendo a la Tupla: " + vid.getValue() + "(" + vindex.getValue() + ")");
        Simbol id = (Simbol) vid;
        Simbol index = (Simbol) vindex;
        index.setValor((Integer) index.getValue());
        index.setValue("integer_literal");
        Tupla TUPLA = taulaSimbols.usarTupla(id.getValue(), ambit);
        print_this("Usanto tupla "+TUPLA.getValue().toString()+" con el ámbito "+ ambit);
        Tupla aux_TUPLA = new Tupla();
        aux_TUPLA.setFila(id.getFila());
        aux_TUPLA.setColumna(id.getColumna());
        if(TUPLA.getValue() != ""){
            if(index.getValor() == 0 || index.getValor() == 1){
                aux_TUPLA.setRef(index.getValor());
                aux_TUPLA.setValor(TUPLA.getVal(TUPLA.getRef()));
                aux_TUPLA.setTipus(TUPLA.getTipusTupla(index.getValor()));
                aux_TUPLA.setD(String.valueOf(index.getValor()));
                aux_TUPLA.setR(TUPLA.getR());
                aux_TUPLA.setValue(TUPLA.getValue());
                aux_TUPLA.setValor(TUPLA.getValor());

                String t1 = c3a.novavar(new Simbol("t1", index.getTipus(), index.getValor()));
                c3a.genera("copy", String.valueOf(index.getValor()), buit, t1);
                String t2 = c3a.novavar(new Simbol("t2", index.getTipus(), index.getValor()));
                c3a.genera("copy", "4", buit, t2);
                String t3 = c3a.novavar(new Simbol("t3", (index.getValor() * nbytes)));
                c3a.genera("prod", t1, t2, t3);
                aux_TUPLA.setD(t3);

                RESULT = aux_TUPLA;
            }else{
                print_this("Error semántico TUPLA_ACCESS");
                String e = ("El índice '" + index + "' de la tupla " + vid.getValue() + " no es correcto. Los índices de tupla solo permíten 0 o 1.");
                semantic_error(e, vindex);
            }
        }else{
            print_this("Error semántico TUPLA_ACCESS");
            String e = ("La tupla " + vid.getValue() + " no ha sido declarada.");
            semantic_error(e, vid);
        }
    }
:}
;

TIPO ::= integer {: print_this("Tipo integer"); RESULT = new Simbol("integer", TipusDades.INTEGER, 1);//1 valor per tipus integer :}
       | logical {: print_this("Tipo boolean"); RESULT = new Simbol("logical", TipusDades.BOOLEAN, 2);//2 valor per tipus boolean :}
       ;

LOG_TERM ::= EXP:vE1 equal EXP:vE2
{:
    print_this("Estas en LOG_TERM equal");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() == TipusDades.NULL || E2.getTipus() == TipusDades.NULL){
            print_this("Error semántico LOG_TERM");
            String e = ("Factor lógico vacío");
            if (E1.getTipus() == TipusDades.NULL){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }else{
            if(E1.getTipus() != E2.getTipus()){
                print_this("Error semántico LOG_TERM");
                String e = ("No se pueden comapar valores de diferente tipo");
                semantic_error(e, vE1);
            }else{
                print_this(E1.getValue() + " equal "+E2.getValue());

                int val = -3;
                if(E1.getValor() == E2.getValor()){
                    val = -1;
                }else{
                    val = 0;
                }
                E1.setTipus(TipusDades.BOOLEAN);
                E1.setValor(val);

                String t = c3a.novavar(E1);
                String e1 = c3a.novaetiqueta();
                String e2 = c3a.novaetiqueta();
                String e3 = c3a.novaetiqueta();
                c3a.genera("if_EQ", E1.getR(), E2.getR(), e1);
                c3a.genera("goto", buit, buit, e2);
                c3a.genera("skip", buit, buit, e1);
                c3a.genera("copy", "-1", buit, t);
                c3a.genera("goto", buit, buit, e3);
                c3a.genera("skip", buit, buit, e2);
                c3a.genera("copy", "0", buit, t);
                c3a.genera("skip", buit, buit, e3);
                E1.setR(t);

                RESULT = E1;
            }
        }
    }
:}
           | EXP:vE1 not_equal EXP:vE2
{:
    print_this("Estas en LOG_TERM not equal");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() == TipusDades.NULL || E2.getTipus() == TipusDades.NULL){
            print_this("Error semántico LOG_TERM");
            String e = ("Factor lógico vacío");
            if (E1.getTipus() == TipusDades.NULL){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }else{
            if(E1.getTipus() != E2.getTipus()){
                print_this("Error semántico LOG_TERM");
                String e = ("No se pueden comapar valores de diferente tipo");
                semantic_error(e, vE1);
            }else{
                print_this(E1.getValue() + " not_equal "+E2.getValue());

                int val = -3;
                if(E1.getValor() != E2.getValor()){
                    val = -1;
                }else{
                    val = 0;
                }
                E1.setTipus(TipusDades.BOOLEAN);
                E1.setValor(val);

                String t = c3a.novavar(E1);
                String e1 = c3a.novaetiqueta();
                String e2 = c3a.novaetiqueta();
                String e3 = c3a.novaetiqueta();
                c3a.genera("if_NE", E1.getR(), E2.getR(), e1);
                c3a.genera("goto", buit, buit, e2);
                c3a.genera("skip", buit, buit, e1);
                c3a.genera("copy", "-1", buit, t);
                c3a.genera("goto", buit, buit, e3);
                c3a.genera("skip", buit, buit, e2);
                c3a.genera("copy", "0", buit, t);
                c3a.genera("skip", buit, buit, e3);
                E1.setR(t);

                RESULT = E1;
            }
        }
    }
:}
           | EXP:vE1 and EXP:vE2
{:
    print_this("Estas en LOG_TERM and");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() != TipusDades.BOOLEAN || E2.getTipus() != TipusDades.BOOLEAN){
            print_this("Error semántico LOG_TERM");
            String e = ("En los términos lógicos solo se permiten valores booleanos");
            if (E1.getTipus() != TipusDades.BOOLEAN){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }else{
            print_this(E1.getValue() + " and " + E2.getValue());

            int val = (E1.getValor() == 0 ? 0 : (E1.getValor() == 0 ? 0 : -1)); //Si E1 false entonces false, sino si E2 false entonces false, sino true
            E1.setValor(val);

            String t1 = c3a.novavar(E1);
            String t2 = c3a.novavar(E1);
            String t3 = c3a.novavar(E2);
            String e1 = c3a.novaetiqueta();
            String e2 = c3a.novaetiqueta();
            String e3 = c3a.novaetiqueta();
            c3a.genera("copy", E1.getR(), buit, t1);
            c3a.genera("if_EQ", t1, "-1", e1);
            c3a.genera("copy", "0", buit, t2);
            c3a.genera("goto", buit, buit, e2);
            c3a.genera("skip", buit, buit, e1);
            c3a.genera("copy", E2.getR(), buit, t3);
            c3a.genera("if_EQ", t3, "-1", e3);
            c3a.genera("copy", "0", buit, t2);
            c3a.genera("goto", buit, buit, e2);
            c3a.genera("skip", buit, buit, e3);
            c3a.genera("copy", "-1", buit, t2);
            c3a.genera("skip", buit, buit, e2);
            E1.setR(t2);

            RESULT = E1;
        }
    }
:}
           | EXP:vE1 or EXP:vE2
{:
    print_this("Estas en LOG_TERM or");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() != TipusDades.BOOLEAN || E2.getTipus() != TipusDades.BOOLEAN){
            print_this("Error semántico LOG_TERM");
            String e = ("En los términos lógicos solo se permiten valores booleanos");
            if (E1.getTipus() != TipusDades.BOOLEAN){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }else{
            print_this(E1.getValue() + " or " + E2.getValue());
            int val = (E1.getValor() == -1 ? -1 : (E1.getValor() == -1 ? -1 : 0)); //Si E1 true entonces true, sino si E2 true entonces true, sino false
            E1.setValor(val);

            String t1 = c3a.novavar(E1);
            String t2 = c3a.novavar(E1);
            String t3 = c3a.novavar(E2);
            String e1 = c3a.novaetiqueta();
            String e2 = c3a.novaetiqueta();
            String e3 = c3a.novaetiqueta();
            c3a.genera("copy", E1.getR(), buit, t1);
            c3a.genera("if_EQ", t1, "0", e1);
            c3a.genera("copy", "-1", buit, t2);
            c3a.genera("goto", buit, buit, e2);
            c3a.genera("skip", buit, buit, e1);
            c3a.genera("copy", E2.getR(), buit, t3);
            c3a.genera("if_EQ", t3, "0", e3);
            c3a.genera("copy", "-1", buit, t2);
            c3a.genera("goto", buit, buit, e2);
            c3a.genera("skip", buit, buit, e3);
            c3a.genera("copy", "0", buit, t2);
            c3a.genera("skip", buit, buit, e2);
            E1.setR(t2);

            RESULT = E1;
        }
    }
:}
;

ARIT_TERM ::= EXP:vE1 plus EXP:vE2
{:
    print_this("Estas en ARIT_TERM +");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() == E2.getTipus() && E1.getTipus() ==  TipusDades.INTEGER){
            E1.setValor(E1.getValor()+E2.getValor());

            String t = c3a.novavar(E1);
            c3a.genera("add", E1.getR(), E2.getR(), t);
            E1.setR(t);

            RESULT = E1;
        }else{
            print_this("Error semántico ARIT_TERM");
            String e = ("El término aritmético solo puede sumar tipos integer: "+E1.getTipus().toString()+" + " + E2.getTipus().toString());
            if (E1.getTipus() != TipusDades.INTEGER){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }
    }
:}
           | EXP:vE1 minus EXP:vE2
{:
    print_this("Estas en ARIT_TERM -");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() == E2.getTipus() && E1.getTipus() ==  TipusDades.INTEGER){
            E1.setValor(E1.getValor()-E2.getValor());

            String t = c3a.novavar(E1);
            c3a.genera("sub", E1.getR(), E2.getR(), t);
            E1.setR(t);

            RESULT = E1;
        }else{
            print_this("Error semántico ARIT_TERM");
            String e = ("El término aritmético solo puede restar tipos integer");
            if (E1.getTipus() != TipusDades.INTEGER){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }
    }
:}
;

ENT_SENT ::= in lparen TIPO:vTIPO rparen
{:
    print_this("Estas en ENT_SENT");
    Simbol TIPO = (Simbol) vTIPO;
    TIPO = TIPO.clone();

    String d0 = c3a.novavar(TIPO);
    c3a.genera("copy", String.valueOf(TIPO.getValor()), buit, d0);
    String d1 = c3a.novavar(new Simbol());
    c3a.genera("in", d0, buit, d1);
    TIPO.setR(d1);

    RESULT = TIPO;
:};

CRID_SIMB ::= id:vid
{:
    print_this("Estas en CRID_SIMB id");
    Simbol aux = (Simbol) vid;
    VariableConstant id = taulaSimbols.usarVariableConstant(vid.getValue(), ambit); //d = consulta(ts, id.id);
    id.setFila(aux.getFila());
    id.setColumna(aux.getColumna());
    print_this("Usanto variable/constante "+id.getValue().toString()+" con el ámbito "+ ambit);
    if(id.getValue() != ""){
        print_this("Se ha obtenido la variable o constante '" + id.getValue() + "' de tipo '" + id.getTipus() + "'");
        RESULT = id;
    }else{
        print_this("Error semántico EXP");
        String e = ("El símbolo '"+vid.getValue().toString()+"' no ha sido declarado");
        semantic_error(e, vid);
    }
:}
            | CRID_FUNC:vCRID_FUNC       {: print_this("Estas en CRID_SIMB funcion"); RESULT = vCRID_FUNC; :}
            | TUPLA_ACCESS:vTUPLA_ACCESS
{:
    print_this("Estas en CRID_SIMB tupla");
    Simbol TUPLA_ACCESS = (Simbol) vTUPLA_ACCESS;
    TUPLA_ACCESS = TUPLA_ACCESS.clone();

    String t = c3a.novavar(TUPLA_ACCESS);
    c3a.genera("ind_val", TUPLA_ACCESS.getR(), TUPLA_ACCESS.getD(), t); // ind_val R.r R.d t
    TUPLA_ACCESS.setR(t);
    TUPLA_ACCESS.setD("");

    RESULT = TUPLA_ACCESS;
:}
;
