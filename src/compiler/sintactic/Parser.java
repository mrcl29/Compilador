
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java.lang.Exception;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import compiler.sintactic.Symbols.*;
import compiler.c3a.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\002\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\023\006\000\002\023\006" +
    "\000\002\024\007\000\002\024\005\000\002\025\007\000" +
    "\002\026\004\000\002\027\011\000\002\030\011\000\002" +
    "\031\005\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\007\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\017\007\000" +
    "\002\017\006\000\002\020\006\000\002\020\005\000\002" +
    "\012\014\000\002\012\013\000\002\015\004\000\002\015" +
    "\003\000\002\016\007\000\002\006\011\000\002\007\011" +
    "\000\002\010\013\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\042\003\000\002\042\003\000\002\043\003\000\002\043" +
    "\004\000\002\044\003\000\002\045\003\000\002\041\006" +
    "\000\002\034\003\000\002\034\003\000\002\021\004\000" +
    "\002\022\005\000\002\022\002\000\002\013\003\000\002" +
    "\013\005\000\002\013\002\000\002\014\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\037\005\000\002\037\005\000\002\047\006\000" +
    "\002\036\003\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\030\002\ufffe\004\013\007\036\010\010\011" +
    "\035\014\006\016\016\022\027\023\023\051\025\052\022" +
    "\001\002\000\022\007\036\010\010\011\035\014\006\016" +
    "\016\022\027\023\023\051\025\001\002\000\040\004\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\020\ufff1\022\ufff1\023\ufff1\051\ufff1" +
    "\052\ufff1\001\002\000\004\035\241\001\002\000\040\004" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\020\ufff4\022\ufff4\023\ufff4\051" +
    "\ufff4\052\ufff4\001\002\000\004\051\233\001\002\000\040" +
    "\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\022\ufff6\023\ufff6" +
    "\051\ufff6\052\ufff6\001\002\000\004\002\232\001\002\000" +
    "\006\024\042\025\041\001\002\000\026\004\013\007\036" +
    "\010\010\011\035\014\006\016\016\022\027\023\023\051" +
    "\025\052\022\001\002\000\004\002\000\001\002\000\014" +
    "\021\057\030\051\047\064\050\053\051\166\001\002\000" +
    "\040\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7\022\ufff7\023" +
    "\ufff7\051\ufff7\052\ufff7\001\002\000\040\004\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\020\ufff9\022\ufff9\023\ufff9\051\ufff9\052\ufff9" +
    "\001\002\000\040\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa" +
    "\022\ufffa\023\ufffa\051\ufffa\052\ufffa\001\002\000\004\002" +
    "\ufffb\001\002\000\004\051\154\001\002\000\040\004\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\020\ufff8\022\ufff8\023\ufff8\051\ufff8" +
    "\052\ufff8\001\002\000\010\026\143\035\144\045\106\001" +
    "\002\000\026\004\013\007\036\010\010\011\035\014\006" +
    "\016\016\022\027\023\023\051\025\052\022\001\002\000" +
    "\004\035\131\001\002\000\004\002\uffff\001\002\000\040" +
    "\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\022\ufff2\023\ufff2" +
    "\051\ufff2\052\ufff2\001\002\000\040\004\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\020\ufff3\022\ufff3\023\ufff3\051\ufff3\052\ufff3\001" +
    "\002\000\040\004\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\022" +
    "\ufff5\023\ufff5\051\ufff5\052\ufff5\001\002\000\004\026\126" +
    "\001\002\000\004\035\122\001\002\000\004\051\037\001" +
    "\002\000\004\040\040\001\002\000\006\024\042\025\041" +
    "\001\002\000\016\026\uffc6\036\uffc6\037\uffc6\042\uffc6\044" +
    "\uffc6\051\uffc6\001\002\000\016\026\uffc7\036\uffc7\037\uffc7" +
    "\042\uffc7\044\uffc7\051\uffc7\001\002\000\004\026\044\001" +
    "\002\000\014\021\057\030\051\047\064\050\053\051\047" +
    "\001\002\000\030\017\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\041\uffd1\042\uffd1" +
    "\001\002\000\030\017\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc\041\uffcc\042\uffcc" +
    "\001\002\000\034\017\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\107\036\uffb7\037\uffb7\041\uffb7" +
    "\042\uffb7\045\106\001\002\000\030\017\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd" +
    "\041\uffcd\042\uffcd\001\002\000\004\047\064\001\002\000" +
    "\030\017\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\001\002\000" +
    "\030\017\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\036\uffc9\037\uffc9\041\uffc9\042\uffc9\001\002\000" +
    "\030\017\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf\001\002\000" +
    "\030\017\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\036\uffb6\037\uffb6\041\uffb6\042\uffb6\001\002\000" +
    "\030\017\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\036\uffce\037\uffce\041\uffce\042\uffce\001\002\000" +
    "\004\035\102\001\002\000\030\017\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\037\uffd2\041" +
    "\uffd2\042\uffd2\001\002\000\030\017\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\041" +
    "\uffb5\042\uffb5\001\002\000\020\027\073\030\071\031\066" +
    "\032\065\033\070\034\072\041\067\001\002\000\030\017" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\036\uffd3\037\uffd3\041\uffd3\042\uffd3\001\002\000\030\017" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\036\uffca\037\uffca\041\uffca\042\uffca\001\002\000\014\021" +
    "\057\030\051\047\064\050\053\051\047\001\002\000\014" +
    "\021\057\030\051\047\064\050\053\051\047\001\002\000" +
    "\040\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\022\uffd6\023" +
    "\uffd6\051\uffd6\052\uffd6\001\002\000\014\021\057\030\051" +
    "\047\064\050\053\051\047\001\002\000\014\021\057\030" +
    "\051\047\064\050\053\051\047\001\002\000\014\021\057" +
    "\030\051\047\064\050\053\051\047\001\002\000\014\021" +
    "\057\030\051\047\064\050\053\051\047\001\002\000\030" +
    "\017\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\036\uffba\037\uffba\041\uffba\042\uffba\001\002\000\030" +
    "\017\uffbb\027\073\030\071\031\066\032\065\033\uffbb\034" +
    "\uffbb\036\uffbb\037\uffbb\041\uffbb\042\uffbb\001\002\000\030" +
    "\017\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\036\uffb9\037\uffb9\041\uffb9\042\uffb9\001\002\000\030" +
    "\017\uffbc\027\073\030\071\031\066\032\065\033\uffbc\034" +
    "\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\001\002\000\030" +
    "\017\uffbe\027\073\030\071\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\036\uffbe\037\uffbe\041\uffbe\042\uffbe\001\002\000\030" +
    "\017\uffbd\027\073\030\071\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\001\002\000\006" +
    "\024\042\025\041\001\002\000\004\036\104\001\002\000" +
    "\030\017\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\001\002\000" +
    "\030\017\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\001\002\000" +
    "\004\047\120\001\002\000\016\021\057\030\051\036\112" +
    "\047\064\050\053\051\047\001\002\000\022\027\073\030" +
    "\071\031\066\032\065\033\070\034\072\036\uffc3\042\114" +
    "\001\002\000\004\036\113\001\002\000\030\017\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc" +
    "\037\uffdc\041\uffdc\042\uffdc\001\002\000\030\017\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd" +
    "\037\uffdd\041\uffdd\042\uffdd\001\002\000\014\021\057\030" +
    "\051\047\064\050\053\051\047\001\002\000\004\036\uffc5" +
    "\001\002\000\022\027\073\030\071\031\066\032\065\033" +
    "\070\034\072\036\uffc3\042\114\001\002\000\004\036\uffc4" +
    "\001\002\000\004\046\121\001\002\000\032\017\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\036\uffc8\037\uffc8\041\uffc8\042\uffc8\001\002\000\014\021" +
    "\057\030\051\047\064\050\053\051\047\001\002\000\020" +
    "\027\073\030\071\031\066\032\065\033\070\034\072\036" +
    "\124\001\002\000\004\037\125\001\002\000\022\007\uffec" +
    "\010\uffec\011\uffec\014\uffec\016\uffec\022\uffec\023\uffec\051" +
    "\uffec\001\002\000\014\021\057\030\051\047\064\050\053" +
    "\051\047\001\002\000\020\027\073\030\071\031\066\032" +
    "\065\033\070\034\072\041\130\001\002\000\040\004\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\020\uffef\022\uffef\023\uffef\051\uffef" +
    "\052\uffef\001\002\000\014\021\057\030\051\047\064\050" +
    "\053\051\047\001\002\000\020\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\036\uffe3\001\002\000\020\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffe0" +
    "\001\002\000\004\036\140\001\002\000\020\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffe2\001\002" +
    "\000\016\027\073\030\071\031\066\032\065\033\070\034" +
    "\072\001\002\000\020\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\036\uffe1\001\002\000\004\041\141\001" +
    "\002\000\040\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\022" +
    "\uffe4\023\uffe4\051\uffe4\052\uffe4\001\002\000\004\002\ufffc" +
    "\001\002\000\014\021\057\030\051\047\064\050\053\051" +
    "\047\001\002\000\016\021\057\030\051\036\146\047\064" +
    "\050\053\051\047\001\002\000\004\036\150\001\002\000" +
    "\004\041\147\001\002\000\040\004\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\020\uffde\022\uffde\023\uffde\051\uffde\052\uffde\001\002" +
    "\000\004\041\151\001\002\000\040\004\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\020\uffdf\022\uffdf\023\uffdf\051\uffdf\052\uffdf\001" +
    "\002\000\020\027\073\030\071\031\066\032\065\033\070" +
    "\034\072\041\153\001\002\000\040\004\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\020\ufff0\022\ufff0\023\ufff0\051\ufff0\052\ufff0\001" +
    "\002\000\004\026\155\001\002\000\004\043\156\001\002" +
    "\000\006\024\042\025\041\001\002\000\004\042\160\001" +
    "\002\000\006\024\042\025\041\001\002\000\004\044\162" +
    "\001\002\000\004\041\163\001\002\000\040\004\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\020\uffd4\022\uffd4\023\uffd4\051\uffd4\052" +
    "\uffd4\001\002\000\004\017\174\001\002\000\020\017\uffe7" +
    "\027\073\030\071\031\066\032\065\033\070\034\072\001" +
    "\002\000\030\017\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\107\037\uffb7\040\172\045\106\001" +
    "\002\000\004\026\170\001\002\000\014\021\057\030\051" +
    "\047\064\050\053\051\047\001\002\000\020\017\uffe8\027" +
    "\073\030\071\031\066\032\065\033\070\034\072\001\002" +
    "\000\006\024\042\025\041\001\002\000\012\026\uffbf\036" +
    "\uffbf\037\uffbf\042\uffbf\001\002\000\014\021\057\030\051" +
    "\047\064\050\053\051\166\001\002\000\020\027\073\030" +
    "\071\031\066\032\065\033\070\034\072\037\uffe5\001\002" +
    "\000\004\037\200\001\002\000\004\037\uffe6\001\002\000" +
    "\022\007\036\010\010\011\035\014\006\016\016\022\027" +
    "\023\023\051\025\001\002\000\004\020\204\001\002\000" +
    "\034\006\uffd8\007\036\010\010\011\035\012\uffd8\013\uffd8" +
    "\014\006\015\uffd8\016\016\020\uffd8\022\027\023\023\051" +
    "\025\001\002\000\014\006\uffd9\012\uffd9\013\uffd9\015\uffd9" +
    "\020\uffd9\001\002\000\040\004\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\020\uffe9\022\uffe9\023\uffe9\051\uffe9\052\uffe9\001\002\000" +
    "\004\002\ufffd\001\002\000\004\051\207\001\002\000\004" +
    "\035\210\001\002\000\006\036\uffc0\051\213\001\002\000" +
    "\004\036\216\001\002\000\006\036\uffc2\042\214\001\002" +
    "\000\004\040\172\001\002\000\006\036\uffc0\051\213\001" +
    "\002\000\004\036\uffc1\001\002\000\004\037\217\001\002" +
    "\000\024\006\221\007\036\010\010\011\035\014\006\016" +
    "\016\022\027\023\023\051\025\001\002\000\004\006\221" +
    "\001\002\000\004\035\224\001\002\000\004\005\223\001" +
    "\002\000\026\004\uffda\007\uffda\010\uffda\011\uffda\014\uffda" +
    "\016\uffda\022\uffda\023\uffda\051\uffda\052\uffda\001\002\000" +
    "\014\021\057\030\051\047\064\050\053\051\047\001\002" +
    "\000\020\027\073\030\071\031\066\032\065\033\070\034" +
    "\072\036\226\001\002\000\004\041\227\001\002\000\004" +
    "\005\uffd7\001\002\000\004\005\231\001\002\000\026\004" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb\016\uffdb\022\uffdb" +
    "\023\uffdb\051\uffdb\052\uffdb\001\002\000\004\002\001\001" +
    "\002\000\004\040\234\001\002\000\006\024\042\025\041" +
    "\001\002\000\004\026\236\001\002\000\014\021\057\030" +
    "\051\047\064\050\053\051\047\001\002\000\020\027\073" +
    "\030\071\031\066\032\065\033\070\034\072\041\240\001" +
    "\002\000\040\004\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\022" +
    "\uffd5\023\uffd5\051\uffd5\052\uffd5\001\002\000\014\021\057" +
    "\030\051\047\064\050\053\051\047\001\002\000\020\027" +
    "\073\030\071\031\066\032\065\033\070\034\072\036\243" +
    "\001\002\000\004\037\244\001\002\000\022\007\036\010" +
    "\010\011\035\014\006\016\016\022\027\023\023\051\025" +
    "\001\002\000\004\015\246\001\002\000\040\004\uffea\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\020\uffea\022\uffea\023\uffea\051\uffea\052" +
    "\uffea\001\002\000\006\012\251\013\252\001\002\000\022" +
    "\007\036\010\010\011\035\014\006\016\016\022\027\023" +
    "\023\051\025\001\002\000\004\037\253\001\002\000\040" +
    "\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\020\uffed\022\uffed\023\uffed" +
    "\051\uffed\052\uffed\001\002\000\022\007\uffeb\010\uffeb\011" +
    "\uffeb\014\uffeb\016\uffeb\022\uffeb\023\uffeb\051\uffeb\001\002" +
    "\000\004\013\255\001\002\000\040\004\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\020\uffee\022\uffee\023\uffee\051\uffee\052\uffee\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\044\002\011\003\014\004\027\005\020\006" +
    "\031\007\030\010\004\011\013\012\025\017\006\023\017" +
    "\024\023\025\003\027\016\030\010\033\032\041\033\001" +
    "\001\000\036\005\020\006\031\007\030\010\004\011\201" +
    "\015\246\017\006\023\017\024\023\025\003\027\016\030" +
    "\010\033\032\041\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\205\001\001\000\040" +
    "\004\204\005\020\006\031\007\030\010\004\011\013\012" +
    "\025\017\006\023\017\024\023\025\003\027\016\030\010" +
    "\033\032\041\033\001\001\000\002\001\001\000\034\014" +
    "\166\020\054\031\163\035\164\036\044\037\057\040\062" +
    "\041\060\042\051\043\055\044\045\045\047\047\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\141\005\020\006\031\007\030" +
    "\010\004\011\013\012\025\017\006\023\017\024\023\025" +
    "\003\027\016\030\010\033\032\041\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\020\054\035\061\036\044\037\057\040\062\041" +
    "\060\042\051\043\055\044\045\045\047\047\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\020\054\035\100\036\044\037\057\040\062" +
    "\041\060\042\051\043\055\044\045\045\047\047\053\001" +
    "\001\000\030\020\054\035\077\036\044\037\057\040\062" +
    "\041\060\042\051\043\055\044\045\045\047\047\053\001" +
    "\001\000\002\001\001\000\030\020\054\035\076\036\044" +
    "\037\057\040\062\041\060\042\051\043\055\044\045\045" +
    "\047\047\053\001\001\000\030\020\054\035\075\036\044" +
    "\037\057\040\062\041\060\042\051\043\055\044\045\045" +
    "\047\047\053\001\001\000\030\020\054\035\074\036\044" +
    "\037\057\040\062\041\060\042\051\043\055\044\045\045" +
    "\047\047\053\001\001\000\030\020\054\035\073\036\044" +
    "\037\057\040\062\041\060\042\051\043\055\044\045\045" +
    "\047\047\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\020\054\021\110\035\107\036\044\037\057\040\062" +
    "\041\060\042\051\043\055\044\045\045\047\047\053\001" +
    "\001\000\004\022\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\020\054\035\115\036" +
    "\044\037\057\040\062\041\060\042\051\043\055\044\045" +
    "\045\047\047\053\001\001\000\002\001\001\000\004\022" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\020\054\035\122\036\044\037\057\040" +
    "\062\041\060\042\051\043\055\044\045\045\047\047\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\020\054\035\126\036\044\037\057\040\062" +
    "\041\060\042\051\043\055\044\045\045\047\047\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\020\054" +
    "\035\135\036\131\037\134\040\136\041\060\042\132\043" +
    "\055\044\045\045\047\046\133\047\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\020\054\035" +
    "\151\036\044\037\057\040\062\041\060\042\051\043\055" +
    "\044\045\045\047\047\053\001\001\000\032\020\054\021" +
    "\144\035\107\036\044\037\057\040\062\041\060\042\051" +
    "\043\055\044\045\045\047\047\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\156\001\001" +
    "\000\002\001\001\000\004\034\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\020\054\035\170\036\044\037\057\040\062\041\060" +
    "\042\051\043\055\044\045\045\047\047\053\001\001\000" +
    "\002\001\001\000\004\034\172\001\001\000\002\001\001" +
    "\000\034\014\176\020\054\032\175\035\174\036\044\037" +
    "\057\040\062\041\060\042\051\043\055\044\045\045\047" +
    "\047\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\020\006\031\007\030\010\004" +
    "\011\201\015\200\017\006\023\017\024\023\025\003\027" +
    "\016\030\010\033\032\041\033\001\001\000\002\001\001" +
    "\000\036\005\020\006\031\007\030\010\004\011\201\015" +
    "\202\017\006\023\017\024\023\025\003\027\016\030\010" +
    "\033\032\041\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\210\014\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\214\014\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\005" +
    "\020\006\031\007\030\010\004\011\201\015\217\016\221" +
    "\017\006\023\017\024\023\025\003\027\016\030\010\033" +
    "\032\041\033\001\001\000\004\016\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\020" +
    "\054\035\224\036\044\037\057\040\062\041\060\042\051" +
    "\043\055\044\045\045\047\047\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\234\001\001\000\002\001\001\000\030\020\054" +
    "\035\236\036\044\037\057\040\062\041\060\042\051\043" +
    "\055\044\045\045\047\047\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\020\054\035\241\036\044\037" +
    "\057\040\062\041\060\042\051\043\055\044\045\045\047" +
    "\047\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\020\006\031\007\030\010\004\011\201\015\244" +
    "\017\006\023\017\024\023\025\003\027\016\030\010\033" +
    "\032\041\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\247\001\001\000\036\005\020\006\031\007" +
    "\030\010\004\011\201\015\253\017\006\023\017\024\023" +
    "\025\003\027\016\030\010\033\032\041\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }
***/

    TaulaSimbols taulaSimbols = new TaulaSimbols();

    public boolean error_detectat = false;

    public boolean DEBUG = false;
    public void print_this(Object msg){
        if(DEBUG){
            System.out.println(msg);
        }
    }

    GenerarCodi c3a = new GenerarCodi();

    int nbytes = 2;
    int buid = -2;

    /**************************************************************
    ************************ GESTIÓ ERRORS ************************
    **************************************************************/

    @Override
    public void syntax_error(Symbol s) {
        report_error("Error sintáctico", s);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        report_error("Error sintáctico inrrecuperable", s);
        done_parsing();
    }

    @Override
    public void report_error(String t, Object info) {
        print_this("Reportando error...");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();

            print_error("Error en la linea " + l.getLine() + " y columna " + l.getColumn() + ": " + info.toString() + " --> " + t);
        }else{
            print_error("info no es Symbol en report_error");
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error fatal ("+message+")", info);
        done_parsing();
    }

    /**
    * Mètode per mostrar un error semàntic
    **/
    public void semantic_error(String t, Object info){
        if(info instanceof Simbol){
            Simbol token = (Simbol) info;

            print_error("Error semántico en la linea " + token.getFila() + " y columna " + token.getColumna() + " --> " + t);
        }else{
            print_error("info no es Symbol en semantic_error");
        }
        done_parsing();
    }

    /**
    * Mètode per mostrar un error
    **/
    public void print_error(String msg){
        error_detectat = true;
        System.err.println("Error--> " + msg);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= BODY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= SENT BODY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= FUNC_DECL BODY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= eof 
            {
              Object RESULT =null;
		 done_parsing(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BODY",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENT ::= DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENT ::= ASIG_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENT ::= IF_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= WHILE_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= FOR_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= SAL_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= CRID_FUNC_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECL ::= VAR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECL ::= CONS_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL ::= TUPLA_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIG_SENT ::= id assign EXP semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en ASIG_SENT para símbolo");
    if(!error_detectat){
        VariableConstant aux_v1 = taulaSimbols.usarVariableConstant(v1.getValue());
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v2.getTipus() == TipusDades.NULL){
            print_this("Error semántico ASIG_SENT");
            String e = ("Valor no asignado");
            semantic_error(e, v2);
        }else{
            if(aux_v1.getValue() != ""){
                if(!aux_v1.isEsConstant()){
                    if(aux_v1.getTipus() != aux_v2.getTipus()){
                        print_this("Error semántico ASIG_SENT");
                        String e = ("Se está intentando asignar un tipo incorrecto a la variable " + v1.getValue());
                        semantic_error(e, v1);
                    }else{
                        aux_v1.setValor(aux_v2.getValor());
                        //if(aux_v1.getD() != -3){
                        //    t = c3a.novavar();
                        //    c3a.genera("prod", aux_v1.getD(), nbytes, t);
                        //    c3a.genera("ind_ass", aux_v2.getR(), t, aux_v1.getR());
                        //}else{
                            c3a.genera("copy", aux_v2.getR(), buid, aux_v1.getR()); //copy R.r = E.r
                        //}

                        RESULT = aux_v1;
                    }
                }else{
                    print_this("Error semántico ASIG_SENT");
                    String e = ("Se esta intentando asignar un nuevo valor a la constante " + v1.getValue());
                    semantic_error(e, v1);
                }
            }else{
                print_this("Error semántico ASIG_SENT");
                String e = ("La variable " + v1.getValue() + " no ha sido declarada");
                semantic_error(e, v1);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIG_SENT ::= TUPLA_ACCESS assign EXP semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en ASIG_SENT para tupla");
    if(!error_detectat){
        Tupla aux_v1 = (Tupla) v1;
        Simbol aux_v2 = (Simbol) v2;
        print_this("Asignando valor a Tupla: "+ aux_v1.getValue());
        if(aux_v2.getTipus() == TipusDades.NULL){
            print_this("Error semántico ASIG_SENT");
            String e = ("Valor no asignado");
            semantic_error(e, v2);
        }else{
            if(aux_v1.getTipus() != aux_v2.getTipus()){
                print_this("Error semántico ASIG_SENT");
                String e = ("A la tupla " + aux_v1.getValue() + " se le esta asignando un tipo incorrecto.");
                semantic_error(e, v1);
            }else{
                aux_v1.setValor(aux_v2.getValor());
                if(aux_v1.getD() != -3){
                    int t = c3a.novavar(aux_v1);
                    c3a.genera("prod", aux_v1.getD(), nbytes, t);           //t = i * nbytes
                    c3a.genera("ind_ass", aux_v2.getR(), t, aux_v1.getR()); //R.r[t] = E.r
                }else{
                    c3a.genera("copy", aux_v2.getR(), buid, aux_v1.getR()); //copy R.r = E.r
                }

                RESULT = aux_v1;
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF_SENT ::= IFINIT COS IFELSE COS endif 
            {
              Object RESULT =null;
		
    print_this("Estas en IF_SENT con else");
    if(!error_detectat){
        int efi = c3a.getNe();                   //Obtenim la etiqueta creada a IFINIT o IFELSE que corerspon a efi
        c3a.genera("skip", buid, buid, efi); //efi: skip
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF_SENT ::= IFINIT COS endif 
            {
              Object RESULT =null;
		
    print_this("Estas en IF_SENT sin else");
    if(!error_detectat){
        int efi = c3a.getNe();                   //Obtenim la etiqueta creada a IFINIT que corerspon a efi
        c3a.genera("skip", buid, buid, efi); //efi: skip
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IFINIT ::= if_t lparen EXP rparen colon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en IFINIT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico IFINIT");
            String e = ("Debes asignar una condición al if");
            semantic_error(e, v1);
        }else{
            if(aux_v1.getTipus() != TipusDades.BOOLEAN){
                print_this("Error semántico IFINIT");
                String e = ("La condición de la sentencia 'if' no es correcta");
                semantic_error(e, v1);
            }else{
                int e = c3a.novaetiqueta();                       //Cream etiqueta que correspon a e o efi
                c3a.genera("if_EQ", aux_v1.getR(), 0, e); //if E.r=0 goto e

                RESULT = aux_v1;
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFINIT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IFELSE ::= else_t colon 
            {
              Object RESULT =null;
		
    print_this("Estas en IFELSE");
    if(!error_detectat){
        int e_else = c3a.getNe();                   //Obtenim la etiqueta creada a IFINIT que correspon a inici de else
        int e = c3a.novaetiqueta();                 //Etiqueta efi
        c3a.genera("goto", buid, buid, e);      //goto efi
        c3a.genera("skip", buid, buid, e_else); //e: skip
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFELSE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // WHILE_SENT ::= while_t lparen EXP rparen colon COS endwhile 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    print_this("Estas en WHILE_SENT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico WHILE_SENT");
            String e = ("Debes asignar una condición al bucle");
            semantic_error(e, v1);
        }else{
            if(aux_v1.getTipus() != TipusDades.BOOLEAN){
                print_this("Error semántico WHILE_SENT");
                String e = ("La condición de la sentencia 'while' no es correcta");
                semantic_error(e, v1);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FOR_SENT ::= for_t FORINIT to FORLIMIT colon COS endfor 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    print_this("Estas en FOR_SENT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() != TipusDades.INTEGER){
            print_this("Error semántico FOR_SENT");
            String e = ("La condición init de la sentencia 'for' no es correcta");
            semantic_error(e, v1);
        }else if(aux_v2.getTipus() != TipusDades.INTEGER){
            print_this("Error semántico FOR_SENT");
            String e = ("La condición limit de la sentencia 'for' no es correcta");
            semantic_error(e, v2);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENT",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORINIT ::= PARAM assign EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en FORINIT");
    if(!error_detectat){
        VariableConstant aux_v1 = (VariableConstant) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() != aux_v2.getTipus()){
            print_this("Error semántico FORINIT");
            String e = ("Estas asignando un tipo incorrecto al parámetro del bucle for");
            semantic_error(e, v2);
        }else{
            RESULT = aux_v1;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORINIT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORINIT ::= EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en FORINIT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico FORINIT");
            String e = ("Inicio del bucle for no especificado");
            semantic_error(e, v1);
        }else{
            RESULT = aux_v1;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORINIT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORLIMIT ::= PARAM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORLIMIT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORLIMIT ::= EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en FORLIMIT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico FORLIMIT");
            String e = ("Límite del bucle for no especificado");
            semantic_error(e, v1);
        }else{
            RESULT = aux_v1;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORLIMIT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SAL_SENT ::= out lparen OUT_EXP rparen semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en SAL_SENT");
    Simbol aux_v1 = (Simbol) v1;
    if(aux_v1.getTipus() == TipusDades.NULL){
        print_this("Error semántico SAL_SENT");
        String e = ("Salida vacía");
        semantic_error(e, v1);
    }else{
        RESULT = aux_v1;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SAL_SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OUT_EXP ::= CRID_SIMB 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en OUT_EXP llamada a símbolo"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OUT_EXP ::= ARIT_TERM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en OUT_EXP llamada a término aritmético"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OUT_EXP ::= LOG_TERM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en OUT_EXP llamada a término lógico"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OUT_EXP ::= LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en OUT_EXP llamada a literal"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CRID_FUNC_SENT ::= id lparen ARGS rparen semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en CRID_FUNC_SENT para argumentos");
    if(!error_detectat){
        print_this("Llamando a Función: "+ v1.getValue());
        Funcio aux_v1 = taulaSimbols.usarFuncio(v1.getValue());
        ArrayList<Simbol> aux_v2 = (ArrayList<Simbol>) v2;
        if(aux_v1.getValue() != ""){
            if(aux_v1.mateixosParametres(aux_v2)){
                RESULT = aux_v1;
            }else{
                print_this("Error semántico CRID_FUNC");
                String e = ("A la funcion " + v1.getValue() + " no se le estan pasando los parámetros correctos");
                semantic_error(e, v1);
            }
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + v1.getValue() + " no ha sido creada");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC_SENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CRID_FUNC_SENT ::= id lparen rparen semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    print_this("Estas en CRID_FUNC_SENT sin argumentos");
    if(!error_detectat){
        print_this("Llamando a Función: "+ v1.getValue());
        Funcio aux_v1 = taulaSimbols.usarFuncio(v1.getValue());
        if(aux_v1.getValue() != ""){
            RESULT = aux_v1;
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + v1.getValue() + " no ha sido creada");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC_SENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CRID_FUNC ::= id lparen ARGS rparen 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

    print_this("Estas en CRID_FUNC para argumentos");
    if(!error_detectat){
        print_this("Llamando a Función: "+ v1.getValue());
        Funcio aux_v1 = taulaSimbols.usarFuncio(v1.getValue());
        ArrayList<Simbol> aux_v2 = (ArrayList<Simbol>) v2;
        if(aux_v1.getValue() != ""){
            if(aux_v1.mateixosParametres(aux_v2)){
                RESULT = aux_v1;
            }else{
                print_this("Error semántico CRID_FUNC");
                String e = ("A la funcion " + v1.getValue() + " no se le estan pasando los parámetros correctos: "+aux_v2.toString());
                semantic_error(e, v1);
            }
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + v1.getValue() + " no ha sido creada");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CRID_FUNC ::= id lparen rparen 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en CRID_FUNC sin argumentos");
    if(!error_detectat){
        print_this("Llamando a Función: "+ v1.getValue());
        Funcio aux_v1 = taulaSimbols.usarFuncio(v1.getValue());
        if(aux_v1.getValue() != ""){
            RESULT = aux_v1;
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + v1.getValue() + " no ha sido creada");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNC_DECL ::= fnct TIPO id lparen PARAM_LIST rparen colon COS FINAL_RTN endfnct 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Simbol v2 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

    print_this("Estas en FUNC_DECL con cuerpo");
    if(!error_detectat){
        print_this("Declarando Función: "+ v2.getValue());
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        ArrayList<VariableConstant> aux_v3 = (ArrayList<VariableConstant>) v3;
        Simbol aux_v4 = (Simbol) v4;
        for(int i = 0; i < aux_v3.size() && !error_detectat; i++){
            print_this(aux_v3.get(i).toString());
        }
        if(!error_detectat){
            if(aux_v4.getTipus() != aux_v1.getTipus()){
                print_this("Error semántico FUNC_DECL");
                String e = ("El valor devuelto no corresponde con el tipo de la función.");
                semantic_error(e, v4);
            }
        }
        if(!error_detectat){
            error_detectat = !taulaSimbols.declararFuncio(new Funcio(v2.getValue(), aux_v3, aux_v1.getTipus()));
            if(error_detectat){
                print_this("Error semántico FUNC_DECL");
                String e = ("Ya existe una función con el nombre '" + v2.getValue() + "'");
                semantic_error(e, v2);
            }else{
                print_this("Función '" + v2.getValue() + " de tipo " + aux_v1.getTipus().toString() + " creada con éxito");
                RESULT = new Funcio(v2.getValue(), aux_v3, aux_v1.getTipus());
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNC_DECL ::= fnct TIPO id lparen PARAM_LIST rparen colon FINAL_RTN endfnct 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Simbol v2 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en FUNC_DECL sin cuerpo");
    if(!error_detectat){
        print_this("Declarando Función: "+ v2.getValue());
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        ArrayList<VariableConstant> aux_v3 = (ArrayList<VariableConstant>) v3;
        Simbol aux_v4 = (Simbol) v4;
        for(int i = 0; i < aux_v3.size() && !error_detectat; i++){
            print_this(aux_v3.get(i).toString());
        }
        if(!error_detectat){
            if(aux_v4.getTipus() != aux_v1.getTipus()){
                print_this("Error semántico FUNC_DECL");
                String e = ("El valor devuelto no corresponde con el tipo de la función.");
                semantic_error(e, v4);
            }
        }
        if(!error_detectat){
            error_detectat = !taulaSimbols.declararFuncio(new Funcio(v2.getValue(), aux_v3, aux_v1.getTipus()));
            if(error_detectat){
                print_this("Error semántico FUNC_DECL");
                String e = ("Ya existe una función con el nombre '" + v2.getValue() + "'");
                semantic_error(e, v2);
            }else{
                print_this("Función '" + v2.getValue() + " de tipo " + aux_v1.getTipus().toString() + " creada con éxito");
                RESULT = new Funcio(v2.getValue(), aux_v3, aux_v1.getTipus());
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COS ::= SENT COS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COS ::= SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FINAL_RTN ::= rtrn lparen EXP rparen semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en FINAL_RTN con cuerpo");
    Simbol aux_v1 = (Simbol) v1;
    if(aux_v1.getTipus() == TipusDades.NULL){
        print_this("Error semántico FINAL_RTN");
        String e = ("No se ha devuelto ningún valor");
        semantic_error(e, v1);
    }else{
        RESULT = aux_v1;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FINAL_RTN",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAR_DECL ::= val id double_colon TIPO assign EXP semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en VAR_DECL");
    if(!error_detectat){
        print_this("Declarando Variable "+ v1.getValue());
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        Simbol aux_v3 = (Simbol) v3;
        if(aux_v3.getTipus() == TipusDades.NULL){
            print_this("Error semántico VAR_DECL");
            String e = ("Valor no asignado");
            semantic_error(e, v3);
        }else{
            error_detectat = !taulaSimbols.declararVariableConstant(new VariableConstant(v1.getValue(), aux_v2.getTipus(), false));
            if(error_detectat){
                print_this("Error semántico VAR_DECL");
                String e = ("Ya existe una variable o constante con el nombre '" + v1.getValue() + "'");
                semantic_error(e, v1);
            }else{
                print_this("Variable '" + v1.getValue() + "' creada con éxito");
                RESULT = new VariableConstant(v1.getValue(), aux_v2.getTipus(), false);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONS_DECL ::= con id double_colon TIPO assign EXP semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en CONS_DECL");
    if(!error_detectat){
        print_this("Declarando Constante "+ v1.getValue());
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        Simbol aux_v3 = (Simbol) v3;
        if(aux_v3.getTipus() == TipusDades.NULL){
            print_this("Error semántico CONS_DECL");
            String e = ("Valor no asignado");
            semantic_error(e, v3);
        }else{
            error_detectat = !taulaSimbols.declararVariableConstant(new VariableConstant(v1.getValue(), aux_v2.getTipus(), true));
            if(error_detectat){
                print_this("Error semántico CONS_DECL");
                String e = ("Ya existe una variable o constante con el nombre '" + v1.getValue() + "'");
                semantic_error(e, v1);
            }else{
                print_this("Constante '" + v1.getValue() + "' creada con éxito");
                RESULT = new VariableConstant(v1.getValue(), aux_v2.getTipus(), true);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONS_DECL",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TUPLA_DECL ::= tuple id assign lbrace TIPO comma TIPO rbrace semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en TUPLA_DECL");
    if(!error_detectat){
        print_this("Declarando Tupla: "+ v1.getValue());
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        Simbol aux_v3 = (Simbol) v3;
        error_detectat = !taulaSimbols.declararTupla(new Tupla(v1.getValue(), aux_v2.getTipus(), aux_v3.getTipus()));
        if(error_detectat){
            print_this("Error semántico TUPLA_DECL");
            String e = ("Ya existe una tupla con el nombre '" + v1.getValue() + "'");
            semantic_error(e, v1);
        }else{
            print_this("Tupla '" + v1.getValue() + "["+ aux_v2.getTipus().toString() +", "+ aux_v3.getTipus().toString() +"]' creada con éxito");
            RESULT = new Tupla(v1.getValue(), aux_v2.getTipus(), aux_v3.getTipus());
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_DECL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= LOG_TERM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP termino lógico"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= ARIT_TERM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP termino aritmético"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= CRID_SIMB 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP llamada a símbolo"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP llamada a literal"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= ENTR_FUNC 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP entrada de sistema"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LIT ::= ENT_LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LIT integer");
    Simbol aux_v1 = (Simbol) v1;

    if(aux_v1.getD() == -3){
        aux_v1.setR(aux_v1.getR());
    }else{
        int t = c3a.novavar(aux_v1);
        c3a.genera("idx_val", aux_v1.getR(), aux_v1.getD(), t);
        aux_v1.setR(t);
    }

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LIT ::= BOL_LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LIT booleano");
    Simbol aux_v1 = (Simbol) v1;

    if(aux_v1.getD() == -3){
        aux_v1.setR(aux_v1.getR());
    }else{
        int t = c3a.novavar(aux_v1);
        c3a.genera("idx_val", aux_v1.getR(), aux_v1.getD(), t);
        aux_v1.setR(t);
    }

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ENT_LIT ::= POS_ENT_LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ENT_LIT positivo");
    Simbol aux_v1 = (Simbol) v1;

    if(aux_v1.getD() == -3){
        aux_v1.setR(aux_v1.getR());
    }else{
        int t = c3a.novavar(aux_v1);
        c3a.genera("idx_val", aux_v1.getR(), aux_v1.getD(), t);
        aux_v1.setR(t);
    }

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENT_LIT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ENT_LIT ::= minus POS_ENT_LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ENT_LIT negativo");
    Simbol aux_v1 = (Simbol) v1;
    aux_v1.setValor(-1*(Integer) aux_v1.getValue());

    int t = c3a.novavar(aux_v1);
    c3a.genera("neg", (Integer) aux_v1.getR(), buid, t);
    aux_v1.setR(t);


    aux_v1.setValor(-1*(Integer) aux_v1.getValue());
    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENT_LIT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // POS_ENT_LIT ::= integer_literal 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Positive integer");
    Simbol aux_v1 = (Simbol) v1;
    aux_v1.setValor((Integer) aux_v1.getValue());

    int t = c3a.novavar(aux_v1);
    c3a.genera("copy", (Integer) aux_v1.getValue(), buid, t);
    aux_v1.setR(t);

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POS_ENT_LIT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOL_LIT ::= boolean_literal 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Boolean literal");
    Simbol aux_v1 = (Simbol) v1;
    if((String) aux_v1.getValue() == "TRUE" || (String) aux_v1.getValue() == "true"){
        aux_v1.setValor(0);
    }else{
        aux_v1.setValor(-1);
    }

    int t = c3a.novavar(aux_v1);
    c3a.genera("copy", aux_v1.getValor(), buid, t);
    aux_v1.setR(t);

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOL_LIT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TUPLA_ACCESS ::= id lbracket integer_literal rbracket 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbol v2 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en TUPLA_ACCESS");
    if(!error_detectat){
        print_this("Accediendo a la Tupla: " + v1.getValue() + "(" + v2.getValue() + ")");
        Simbol aux_v1 = (Simbol) v1;
        Integer index = (Integer) v2.getValue();
        Tupla aux_tupla = taulaSimbols.usarTupla(v1.getValue());
        if(aux_tupla.getValue() != ""){
            if(index == 0 || index == 1){
                aux_tupla.setTipus(aux_tupla.getTipus(index));
                aux_tupla.setFila(aux_v1.getFila());
                aux_tupla.setColumna(aux_v1.getColumna());

                int t1 = c3a.novavar(new Simbol("t1", (Integer) v2.getValue()));
                c3a.genera("copy", (Integer) v2.getValue(), buid, t1);
                int t2 = c3a.novavar(new Simbol("t2", (((Integer) v2.getValue()) * nbytes)));
                c3a.genera("prod", t1, nbytes, t2);
                aux_tupla.setD(t2);

                RESULT = aux_tupla;
            }else{
                print_this("Error semántico TUPLA_ACCESS");
                String e = ("El índice '" + index + "' de la tupla " + v1.getValue() + " no es correcto. Los índices de tupla solo permíten 0 o 1.");
                semantic_error(e, v2);
            }
        }else{
            print_this("Error semántico TUPLA_ACCESS");
            String e = ("La tupla " + v1.getValue() + " no ha sido declarada.");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_ACCESS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= integer 
            {
              Object RESULT =null;
		 print_this("Tipo integer"); RESULT = new Simbol("integer", TipusDades.INTEGER, 1);//1 valor per tipus integer 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= logical 
            {
              Object RESULT =null;
		 print_this("Tipo boolean"); RESULT = new Simbol("logical", TipusDades.BOOLEAN, 2);//2 valor per tipus boolean 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGS ::= EXP ARGS_LIST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ARGS");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        if(aux_v1.getTipus() == TipusDades.NULL){
            RESULT = new ArrayList<Simbol>();
        }else{
            ArrayList<Simbol> aux_v2 = (ArrayList<Simbol>) v2;
            aux_v2.add(0, aux_v1);
            RESULT = aux_v2;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARGS_LIST ::= comma EXP ARGS_LIST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ARGS_LIST");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico ARGS_LIST");
            String e = ("Argumento vacío");
            semantic_error(e, v1);
        }else{
            ArrayList<Simbol> aux_v2 = (ArrayList<Simbol>) v2;
            aux_v2.add(0, aux_v1);
            RESULT = aux_v2;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_LIST",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARGS_LIST ::= 
            {
              Object RESULT =null;
		 print_this("Estas en ARGS_LIST epsilon"); RESULT = new ArrayList<Simbol>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_LIST",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARAM_LIST ::= PARAM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en PARAM_LIST");
    if(!error_detectat){
        RESULT = new ArrayList<VariableConstant>(Arrays.asList((VariableConstant) v1));
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARAM_LIST ::= PARAM comma PARAM_LIST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en PARAM_LIST");
    if(!error_detectat){
        VariableConstant aux_v1 = (VariableConstant) v1;
        ArrayList<VariableConstant> aux_v2 = (ArrayList<VariableConstant>) v2;
        aux_v2.add(0, aux_v1);
        RESULT = aux_v2;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PARAM_LIST ::= 
            {
              Object RESULT =null;
		 print_this("Estas en PARAM_LIST epsilon"); RESULT = new ArrayList<VariableConstant>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PARAM ::= id double_colon TIPO 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en PARAM");
    if(!error_detectat){
        print_this("Declarando Parámetro "+ v1.getValue());
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        error_detectat = !taulaSimbols.declararVariableConstant(new VariableConstant(v1.getValue(), aux_v2.getTipus(), false));
        if(error_detectat){
            print_this("Error semántico PARAM");
            String e = ("Ya existe una variable o constante con el nombre '" + v1.getValue() + "'");
            semantic_error(e, v1);
        }else{
            print_this("Parámetro '" + v1.getValue() + "' creado con éxito");
            RESULT = new VariableConstant(v1.getValue(), aux_v2.getTipus(), false);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOG_TERM ::= EXP equal EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LOG_TERM equal");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
                if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico LOG_TERM");
            String e = ("Factor lógico vacío");
            semantic_error(e, v1);
        }else{
            if(aux_v2.getTipus() == TipusDades.NULL){
                print_this("Error semántico LOG_TERM");
                String e = ("Factor lógico vacío");
                semantic_error(e, v2);
            }else{
                if(aux_v1.getTipus() == aux_v2.getTipus()){
                    print_this(aux_v1.getValue() + " equal " + aux_v2.getValue());

                    int t = c3a.novavar(new Simbol("t", buid));
                    int e1 = c3a.novaetiqueta();
                    int e2 = c3a.novaetiqueta();
                    c3a.genera("ifNE", aux_v1.getR(), aux_v2.getR(), e1);
                    c3a.genera("copy", 0, buid, t);
                    c3a.genera("goto", buid, buid, e2);
                    c3a.genera("skip", buid, buid, e1);
                    c3a.genera("copy", -1, buid, t);
                    c3a.genera("skip", buid, buid, e2);
                    RESULT = new Simbol(aux_v1.getFila(), aux_v1.getColumna(), aux_v1.getValue(), TipusDades.BOOLEAN, t);
                }else{
                    print_this("Error semántico LOG_TERM");
                    String e = (aux_v1.getValue() + " no es del mismo tipo que " + aux_v2.getValue());
                    semantic_error(e, v1);
                }
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOG_TERM ::= EXP not_equal EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LOG_TERM not equal");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico LOG_TERM");
            String e = ("Factor lógico vacío");
            semantic_error(e, v1);
        }else{
            if(aux_v2.getTipus() == TipusDades.NULL){
                print_this("Error semántico LOG_TERM");
                String e = ("Factor lógico vacío");
                semantic_error(e, v2);
            }else{
                if(aux_v1.getTipus() == aux_v2.getTipus()){
                    print_this(aux_v1.getValue() + " not_equal "+aux_v2.getValue());

                    int t = c3a.novavar(new Simbol("t", buid));
                    int e1 = c3a.novaetiqueta();
                    int e2 = c3a.novaetiqueta();
                    c3a.genera("ifEQ", aux_v1.getR(), aux_v2.getR(), e1);
                    c3a.genera("copy", 0, buid, t);
                    c3a.genera("goto", buid, buid, e2);
                    c3a.genera("skip", buid, buid, e1);
                    c3a.genera("copy", -1, buid, t);
                    c3a.genera("skip", buid, buid, e2);
                    RESULT = new Simbol(aux_v1.getFila(), aux_v1.getColumna(), aux_v1.getValue(), TipusDades.BOOLEAN, t);
                }else{
                    print_this("Error semántico LOG_TERM");
                    String e = (aux_v1.getValue() + " no es del mismo tipo que " + aux_v2.getValue());
                    semantic_error(e, v1);
                }
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOG_TERM ::= EXP and EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LOG_TERM and");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico LOG_TERM");
            String e = ("Factor lógico vacío");
            semantic_error(e, v1);
        }else{
            if(aux_v2.getTipus() == TipusDades.NULL){
                print_this("Error semántico LOG_TERM");
                String e = ("Factor lógico vacío");
                semantic_error(e, v2);
            }else{
                print_this(aux_v1.getValue() + " and " + aux_v2.getValue());
                int val = (aux_v1.getValor() == 0 ? 0 : (aux_v1.getValor() == 0 ? 0 : -1));
                int t = c3a.novavar(new Simbol("t", val));
                c3a.genera("and", aux_v1.getR(), aux_v2.getR(), t);
                RESULT = new Simbol(aux_v1.getFila(), aux_v1.getColumna(), aux_v1.getValue(), TipusDades.BOOLEAN, t, val);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOG_TERM ::= EXP or EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LOG_TERM or");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico LOG_TERM");
            String e = ("Factor lógico vacío");
            semantic_error(e, v1);
        }else{
            if(aux_v2.getTipus() == TipusDades.NULL){
                print_this("Error semántico LOG_TERM");
                String e = ("Factor lógico vacío");
                semantic_error(e, v2);
            }else{
                print_this(aux_v1.getValue() + " or " + aux_v2.getValue());
                int val = (aux_v1.getValor() == 0 ? 0 : (aux_v1.getValor() == 0 ? 0 : -1));
                int t = c3a.novavar(new Simbol("t", val));
                c3a.genera("or", aux_v1.getR(), aux_v2.getR(), t);
                RESULT = new Simbol(aux_v1.getFila(), aux_v1.getColumna(), aux_v1.getValue(), TipusDades.BOOLEAN, t, val);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARIT_TERM ::= EXP plus EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ARIT_TERM");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == TipusDades.INTEGER || aux_v2.getTipus() ==  TipusDades.INTEGER){

            int t = c3a.novavar(new Simbol("t", aux_v1.getValor() + aux_v2.getValor()));
            c3a.genera("add", aux_v1.getR(), aux_v2.getR(), t);
            aux_v1.setR(t);

            RESULT = aux_v1;
        }else{
            print_this("Error semántico ARIT_TERM");
            String e = ("El término aritmético solo puede sumar tipos integer");
            semantic_error(e, aux_v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARIT_TERM ::= EXP minus EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ARIT_TERM");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == aux_v2.getTipus() || aux_v2.getTipus() ==  TipusDades.NULL){

            int t = c3a.novavar(new Simbol("t", aux_v1.getValor() - aux_v2.getValor()));
            c3a.genera("sub", aux_v1.getR(), aux_v2.getR(), t);
            aux_v1.setR(t);

            RESULT = aux_v1;
        }else{
            print_this("Error semántico ARIT_TERM");
            String e = ("El término aritmético solo puede restar tipos integer");
            semantic_error(e, aux_v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ENTR_FUNC ::= in lparen TIPO rparen 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en ENTR_FUNC");
    Simbol aux_v1 = (Simbol) v1;

    int d0 = c3a.novavar(aux_v1);
    c3a.genera("copy", aux_v1.getValor(), buid, d0);
    int d1 = c3a.novavar(new Simbol("d1", buid));
    c3a.genera("in", d0, buid, d1);
    aux_v1.setR(d1);

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTR_FUNC",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CRID_SIMB ::= id 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en CRID_SIMB id");
    Simbol aux_v1 = taulaSimbols.usarSimbol(v1.getValue()); //d = consulta(ts, id.id);
    if(aux_v1.getValue() != ""){

        if (aux_v1 instanceof VariableConstant) {
            aux_v1.setR(aux_v1.getR()); //d.nv té el número de variable
        } else {
            int t = c3a.novavar(aux_v1);
            c3a.genera("copy", aux_v1.getValor(), buid, t);
            aux_v1.setR(t);
        }
        aux_v1.setD(-3);

        RESULT = aux_v1;
    }else{
        print_this("Error semántico EXP");
        String e = ("El símbolo llamado no ha sido declarado");
        semantic_error(e, v1);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_SIMB",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CRID_SIMB ::= CRID_FUNC 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en CRID_SIMB funcion");
    Simbol aux_v1 = (Simbol) v1;

    if(aux_v1.getD() == -3){
        aux_v1.setR(aux_v1.getR());
    }else{
        int t = c3a.novavar(aux_v1);
        c3a.genera("idx_val", aux_v1.getR(), aux_v1.getD(), t);
        aux_v1.setR(t);
    }

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_SIMB",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CRID_SIMB ::= TUPLA_ACCESS 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en CRID_SIMB tupla");

    Simbol aux_v1 = (Simbol) v1;

    if(aux_v1.getD() == -3){
        aux_v1.setR(aux_v1.getR());
    }else{
        int t = c3a.novavar(aux_v1);
        c3a.genera("idx_val", aux_v1.getR(), aux_v1.getD(), t);
        aux_v1.setR(t);
    }

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_SIMB",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
