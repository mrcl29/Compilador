
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java.lang.Exception;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import compiler.sintactic.Symbols.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\013\004" +
    "\000\002\013\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\016\006\000\002\017\014\000\002\017\011\000" +
    "\002\020\011\000\002\021\011\000\002\024\006\000\002" +
    "\025\007\000\002\026\007\000\002\027\006\000\002\027" +
    "\005\000\002\010\014\000\002\010\013\000\002\005\011" +
    "\000\002\006\011\000\002\007\013\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\040\006\000\002\032\003\000" +
    "\002\032\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\030\004\000\002\011" +
    "\003\000\002\011\005\000\002\011\002\000\002\014\007" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\034\004\000\002\041\003\000\002" +
    "\041\003\000\002\046\006\000\002\047\006\000\002\031" +
    "\005\000\002\031\002\000\002\012\005\000\002\035\005" +
    "\000\002\035\003\000\002\036\005\000\002\036\005\000" +
    "\002\036\002\000\002\043\004\000\002\044\003\000\002" +
    "\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\026\004\013\007\037\010\010\011\036\014" +
    "\006\016\017\021\020\022\031\023\025\051\027\001\002" +
    "\000\040\002\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\051\ufff4\001\002\000\040\002\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\020\uffef\021\uffef\022\uffef\023\uffef\051" +
    "\uffef\001\002\000\004\035\254\001\002\000\004\002\uffff" +
    "\001\002\000\004\051\246\001\002\000\040\002\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\051" +
    "\ufff6\001\002\000\004\002\245\001\002\000\006\024\043" +
    "\025\042\001\002\000\040\002\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\051\ufff2\001\002\000" +
    "\040\002\ufffb\006\ufffb\007\037\010\010\011\036\012\ufffb" +
    "\013\ufffb\014\006\015\ufffb\016\017\020\ufffb\021\020\022" +
    "\031\023\025\051\027\001\002\000\004\002\000\001\002" +
    "\000\022\007\037\021\055\022\062\030\051\035\064\047" +
    "\046\050\067\051\060\001\002\000\004\035\200\001\002" +
    "\000\040\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\051\ufff5\001\002\000\040\002\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\051" +
    "\ufff7\001\002\000\040\002\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\051\ufff9\001\002\000\040" +
    "\002\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\051\ufffa\001\002\000\004\051\170\001\002\000" +
    "\040\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\051\ufff8\001\002\000\010\026\165\035\114" +
    "\045\113\001\002\000\030\002\ufffd\004\013\007\037\010" +
    "\010\011\036\014\006\016\017\021\020\022\031\023\025" +
    "\051\027\001\002\000\004\035\160\001\002\000\040\002" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\051\ufff0\001\002\000\040\002\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\051\ufff1\001\002" +
    "\000\040\002\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\051\ufff3\001\002\000\004\026\155\001" +
    "\002\000\004\035\143\001\002\000\004\051\040\001\002" +
    "\000\004\040\041\001\002\000\006\024\043\025\042\001" +
    "\002\000\014\026\uffd1\036\uffd1\042\uffd1\044\uffd1\051\uffd1" +
    "\001\002\000\014\026\uffd2\036\uffd2\042\uffd2\044\uffd2\051" +
    "\uffd2\001\002\000\004\026\045\001\002\000\020\021\055" +
    "\022\062\030\051\035\064\047\046\050\067\051\060\001" +
    "\002\000\030\017\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\036\uffb4\037\uffb4\041\uffb4\042\uffb4\001" +
    "\002\000\024\017\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\036\uffda\037\uffda\041\uffda\042\uffda\001\002\000\024\017" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8" +
    "\041\uffd8\042\uffd8\001\002\000\004\047\142\001\002\000" +
    "\024\017\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\037\uffc2\041\uffc2\042\uffc2\001\002\000\024\017\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\041\uffdd" +
    "\042\uffdd\001\002\000\024\017\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\001\002" +
    "\000\004\035\137\001\002\000\014\031\074\032\072\033" +
    "\075\034\076\041\136\001\002\000\030\017\uffb7\027\131" +
    "\030\127\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7\037" +
    "\uffb7\041\uffb7\042\uffb7\001\002\000\030\017\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\114\036\uffdc\037\uffdc\041" +
    "\uffdc\042\uffdc\045\113\001\002\000\024\017\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde\041\uffde\042" +
    "\uffde\001\002\000\004\035\103\001\002\000\030\017\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036" +
    "\uffba\037\uffba\041\uffba\042\uffba\001\002\000\020\021\055" +
    "\022\062\030\051\035\064\047\046\050\067\051\060\001" +
    "\002\000\024\017\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\036\uffc1\037\uffc1\041\uffc1\042\uffc1\001\002\000\024\017" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb" +
    "\041\uffdb\042\uffdb\001\002\000\024\017\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\041\uffb5\042\uffb5" +
    "\001\002\000\024\017\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\036\uffdf\037\uffdf\041\uffdf\042\uffdf\001\002\000\014" +
    "\031\074\032\072\033\075\034\076\036\073\001\002\000" +
    "\020\021\055\022\062\030\051\035\064\047\046\050\067" +
    "\051\060\001\002\000\030\017\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb\041\uffbb" +
    "\042\uffbb\001\002\000\020\021\055\022\062\030\051\035" +
    "\064\047\046\050\067\051\060\001\002\000\020\021\055" +
    "\022\062\030\051\035\064\047\046\050\067\051\060\001" +
    "\002\000\020\021\055\022\062\030\051\035\064\047\046" +
    "\050\067\051\060\001\002\000\024\017\uffc4\031\074\032" +
    "\072\033\uffc4\034\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4" +
    "\001\002\000\024\017\uffc5\031\074\032\072\033\uffc5\034" +
    "\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5\001\002\000\024" +
    "\017\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\037" +
    "\uffc7\041\uffc7\042\uffc7\001\002\000\024\017\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\036\uffc6\037\uffc6\041\uffc6\042" +
    "\uffc6\001\002\000\020\021\055\022\062\030\051\035\064" +
    "\047\046\050\067\051\106\001\002\000\014\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\036\uffcf\001\002\000\012\031\074" +
    "\032\072\033\075\034\076\001\002\000\020\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\114\036\uffd0\045\113\001\002" +
    "\000\004\036\112\001\002\000\014\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\036\uffce\001\002\000\014\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\036\uffcd\001\002\000\024\017\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf\041\uffbf" +
    "\042\uffbf\001\002\000\004\047\125\001\002\000\022\021" +
    "\055\022\062\030\051\035\064\036\117\047\046\050\067" +
    "\051\060\001\002\000\016\031\074\032\072\033\075\034" +
    "\076\036\uffbd\042\121\001\002\000\004\036\120\001\002" +
    "\000\062\002\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\036\uffe5\037\uffe5\041\uffe5\042\uffe5\051\uffe5\001\002" +
    "\000\062\002\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\051\uffe6\001\002" +
    "\000\020\021\055\022\062\030\051\035\064\047\046\050" +
    "\067\051\060\001\002\000\004\036\uffcc\001\002\000\016" +
    "\031\074\032\072\033\075\034\076\036\uffbd\042\121\001" +
    "\002\000\004\036\uffbe\001\002\000\004\046\126\001\002" +
    "\000\026\017\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\001\002\000\006" +
    "\035\064\047\046\001\002\000\024\017\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3" +
    "\001\002\000\006\035\064\047\046\001\002\000\030\017" +
    "\uffb7\027\131\030\127\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\036\uffb7\037\uffb7\041\uffb7\042\uffb7\001\002\000\024\017" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\037\uffb9" +
    "\041\uffb9\042\uffb9\001\002\000\030\017\uffb7\027\131\030" +
    "\127\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7" +
    "\041\uffb7\042\uffb7\001\002\000\024\017\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8" +
    "\001\002\000\042\002\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\051\uffe2\001\002\000" +
    "\006\024\043\025\042\001\002\000\004\036\141\001\002" +
    "\000\024\017\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036" +
    "\uffc0\037\uffc0\041\uffc0\042\uffc0\001\002\000\024\017\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\041" +
    "\uffb6\042\uffb6\001\002\000\020\021\055\022\062\030\051" +
    "\035\064\047\046\050\067\051\060\001\002\000\014\031" +
    "\074\032\072\033\075\034\076\036\145\001\002\000\004" +
    "\037\146\001\002\000\024\007\037\010\010\011\036\014" +
    "\006\016\017\021\020\022\031\023\025\051\027\001\002" +
    "\000\006\012\151\013\150\001\002\000\040\002\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\020\uffec\021\uffec\022\uffec\023\uffec\051" +
    "\uffec\001\002\000\004\037\152\001\002\000\024\007\037" +
    "\010\010\011\036\014\006\016\017\021\020\022\031\023" +
    "\025\051\027\001\002\000\004\013\154\001\002\000\040" +
    "\002\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\051\uffed\001\002\000\020\021\055\022\062\030" +
    "\051\035\064\047\046\050\067\051\060\001\002\000\014" +
    "\031\074\032\072\033\075\034\076\041\157\001\002\000" +
    "\040\002\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\051\uffe9\001\002\000\020\021\055\022\062" +
    "\030\051\035\064\047\046\050\067\051\106\001\002\000" +
    "\004\036\162\001\002\000\004\041\163\001\002\000\040" +
    "\002\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\051\uffe7\001\002\000\004\002\ufffe\001\002\000" +
    "\020\021\055\022\062\030\051\035\064\047\046\050\067" +
    "\051\060\001\002\000\014\031\074\032\072\033\075\034" +
    "\076\041\167\001\002\000\040\002\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\051\uffee\001\002" +
    "\000\004\026\171\001\002\000\004\043\172\001\002\000" +
    "\006\024\043\025\042\001\002\000\004\042\174\001\002" +
    "\000\006\024\043\025\042\001\002\000\004\044\176\001" +
    "\002\000\004\041\177\001\002\000\040\002\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\051\uffe0" +
    "\001\002\000\006\024\043\025\042\001\002\000\004\036" +
    "\202\001\002\000\004\041\203\001\002\000\040\002\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\051\uffe8\001\002\000\004\017\207\001\002\000\014\017" +
    "\uffd6\031\074\032\072\033\075\034\076\001\002\000\004" +
    "\017\uffd7\001\002\000\022\010\010\021\055\022\062\030" +
    "\051\035\064\047\046\050\067\051\060\001\002\000\014" +
    "\031\074\032\072\033\075\034\076\037\uffd4\001\002\000" +
    "\004\037\213\001\002\000\004\037\uffd5\001\002\000\024" +
    "\007\037\010\010\011\036\014\006\016\017\021\020\022" +
    "\031\023\025\051\027\001\002\000\004\020\215\001\002" +
    "\000\040\002\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\051\uffea\001\002\000\016\002\ufffc\006" +
    "\ufffc\012\ufffc\013\ufffc\015\ufffc\020\ufffc\001\002\000\004" +
    "\051\220\001\002\000\004\035\221\001\002\000\006\036" +
    "\uffc9\051\224\001\002\000\006\036\uffcb\042\243\001\002" +
    "\000\004\036\227\001\002\000\004\040\225\001\002\000" +
    "\006\024\043\025\042\001\002\000\006\036\uffbc\042\uffbc" +
    "\001\002\000\004\037\230\001\002\000\026\006\232\007" +
    "\037\010\010\011\036\014\006\016\017\021\020\022\031" +
    "\023\025\051\027\001\002\000\004\006\232\001\002\000" +
    "\004\035\235\001\002\000\004\005\234\001\002\000\030" +
    "\002\uffe3\004\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3\016" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\051\uffe3\001\002\000\020" +
    "\021\055\022\062\030\051\035\064\047\046\050\067\051" +
    "\060\001\002\000\014\031\074\032\072\033\075\034\076" +
    "\036\237\001\002\000\004\041\240\001\002\000\004\005" +
    "\uffc8\001\002\000\004\005\242\001\002\000\030\002\uffe4" +
    "\004\uffe4\007\uffe4\010\uffe4\011\uffe4\014\uffe4\016\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\051\uffe4\001\002\000\006\036\uffc9" +
    "\051\224\001\002\000\004\036\uffca\001\002\000\004\002" +
    "\001\001\002\000\004\040\247\001\002\000\006\024\043" +
    "\025\042\001\002\000\004\026\251\001\002\000\020\021" +
    "\055\022\062\030\051\035\064\047\046\050\067\051\060" +
    "\001\002\000\014\031\074\032\072\033\075\034\076\041" +
    "\253\001\002\000\042\002\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\037\uffe1\051\uffe1\001\002" +
    "\000\020\021\055\022\062\030\051\035\064\047\046\050" +
    "\067\051\060\001\002\000\014\031\074\032\072\033\075" +
    "\034\076\036\256\001\002\000\004\037\257\001\002\000" +
    "\024\007\037\010\010\011\036\014\006\016\017\021\020" +
    "\022\031\023\025\051\027\001\002\000\004\015\261\001" +
    "\002\000\040\002\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\051\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\046\002\011\003\015\004\023\005\032\006" +
    "\031\007\004\010\027\013\006\015\014\016\022\017\025" +
    "\020\021\021\010\024\020\025\003\026\033\027\013\040" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\216\001\001\000\002" +
    "\001\001\000\040\004\023\005\032\006\031\007\004\013" +
    "\215\015\014\016\022\017\025\020\021\021\010\024\020" +
    "\025\003\026\033\027\013\040\034\001\001\000\002\001" +
    "\001\000\036\005\205\022\203\027\052\033\204\034\060" +
    "\035\056\037\067\040\065\041\046\042\062\043\051\044" +
    "\064\046\053\047\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\163\004\023\005\032\006\031\007\004\010" +
    "\027\013\006\015\014\016\022\017\025\020\021\021\010" +
    "\024\020\025\003\026\033\027\013\040\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\027" +
    "\052\033\055\034\060\035\056\037\067\040\065\041\046" +
    "\042\062\043\051\044\064\046\053\047\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\027\052\033\070\034\060" +
    "\035\056\037\067\040\065\041\046\042\062\043\051\044" +
    "\064\046\053\047\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\027\052\033\101\034\060\035\056\037\067" +
    "\040\065\041\046\042\062\043\051\044\064\046\053\047" +
    "\047\001\001\000\002\001\001\000\032\027\052\033\100" +
    "\034\060\035\056\037\067\040\065\041\046\042\062\043" +
    "\051\044\064\046\053\047\047\001\001\000\032\027\052" +
    "\033\077\034\060\035\056\037\067\040\065\041\046\042" +
    "\062\043\051\044\064\046\053\047\047\001\001\000\032" +
    "\027\052\033\076\034\060\035\056\037\067\040\065\041" +
    "\046\042\062\043\051\044\064\046\053\047\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\027\103\033\104\034\107\035\056" +
    "\037\110\040\065\041\046\042\062\043\051\044\064\045" +
    "\106\046\053\047\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\027\052\030\115\033\114\034\060\035\056\037" +
    "\067\040\065\041\046\042\062\043\051\044\064\046\053" +
    "\047\047\001\001\000\004\031\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\027\052" +
    "\033\122\034\060\035\056\037\067\040\065\041\046\042" +
    "\062\043\051\044\064\046\053\047\047\001\001\000\002" +
    "\001\001\000\004\031\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\133\042\062" +
    "\001\001\000\002\001\001\000\006\035\131\042\062\001" +
    "\001\000\004\036\132\001\001\000\002\001\001\000\004" +
    "\036\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\027\052\033\143\034\060\035" +
    "\056\037\067\040\065\041\046\042\062\043\051\044\064" +
    "\046\053\047\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\023\005\032\006\031\007\004\013\146" +
    "\015\014\016\022\017\025\020\021\021\010\024\020\025" +
    "\003\026\033\027\013\040\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\023\005" +
    "\032\006\031\007\004\013\152\015\014\016\022\017\025" +
    "\020\021\021\010\024\020\025\003\026\033\027\013\040" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\027\052\033\155\034\060\035\056\037\067\040\065\041" +
    "\046\042\062\043\051\044\064\046\053\047\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\027\103\033" +
    "\104\034\107\035\056\037\110\040\065\041\046\042\062" +
    "\043\051\044\064\045\160\046\053\047\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\027\052\033\165\034\060\035\056\037" +
    "\067\040\065\041\046\042\062\043\051\044\064\046\053" +
    "\047\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\172\001\001" +
    "\000\002\001\001\000\004\032\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\211\023\210\027\052\033\207\034\060\035" +
    "\056\037\067\040\065\041\046\042\062\043\051\044\064" +
    "\046\053\047\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\023\005\032\006\031" +
    "\007\004\013\213\015\014\016\022\017\025\020\021\021" +
    "\010\024\020\025\003\026\033\027\013\040\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\222\012\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\023\005\032\006\031\007\004\013" +
    "\230\014\232\015\014\016\022\017\025\020\021\021\010" +
    "\024\020\025\003\026\033\027\013\040\034\001\001\000" +
    "\004\014\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\027\052\033\235\034\060\035" +
    "\056\037\067\040\065\041\046\042\062\043\051\044\064" +
    "\046\053\047\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\243\012\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\247\001\001" +
    "\000\002\001\001\000\032\027\052\033\251\034\060\035" +
    "\056\037\067\040\065\041\046\042\062\043\051\044\064" +
    "\046\053\047\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\027\052\033\254\034\060\035\056\037\067" +
    "\040\065\041\046\042\062\043\051\044\064\046\053\047" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\023\005\032\006\031\007\004\013\257\015\014\016" +
    "\022\017\025\020\021\021\010\024\020\025\003\026\033" +
    "\027\013\040\034\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }
***/

    TaulaSimbols taulaSimbols = new TaulaSimbols();

    public boolean error_detectat = false;

    public boolean DEBUG = true;
    public void print_this(Object msg){
        if(DEBUG){
            System.out.println(msg);
        }
    }

    /**************************************************************
    ************************ GESTIÓ ERRORS ************************
    **************************************************************/

    @Override
    public void syntax_error(Symbol s) {
        report_error("Error sintáctico", s);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        report_error("Error sintáctico inrrecuperable", s);
        done_parsing();
    }

    @Override
    public void report_error(String t, Object info) {
        print_this("Reportando error...");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();

            print_error("Error en la linea " + l.getLine() + " y columna " + l.getColumn() + " --> " + t);
        }else{
            print_error("info no es Symbol en report_error");
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error fatal ("+message+")", info);
        done_parsing();
    }

    /**
    * Mètode per mostrar un error semàntic
    **/
    public void semantic_error(String t, Object info){
        print_this("Imprimiendo error semántico...");
        if(info instanceof Simbol){
            Simbol token = (Simbol) info;

            print_error("Error semántico en la linea " + token.getFila() + " y columna " + token.getColumna() + " --> " + t);
        }else{
            print_error("info no es Symbol en semantic_error");
        }
        done_parsing();
    }

    /**
    * Mètode per mostrar un error
    **/
    public void print_error(String msg){
        error_detectat = true;
        System.err.println("Error--> " + msg);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= COS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= FUNC_DECL P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // P ::= FUNC_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COS ::= SENT COS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COS ::= SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENT ::= DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENT ::= ASIG_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENT ::= IF_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= WHILE_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= FOR_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= TUPLA_ASSIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= ENTR_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= SAL_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= CRID_FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL ::= VAR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECL ::= CONS_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECL ::= TUPLA_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIG_SENT ::= id assign EXP semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(!error_detectat ){
        VariableConstant aux_v1 = taulaSimbols.usarVariableConstant(v1.getValue());
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getValue() != ""){
            if(!aux_v1.isEsConstant()){
                if(aux_v1.getTipus() != aux_v2.getTipus()){
                    print_this("Error semántico ASIG_SENT");
                    String e = ("Se está intentando asignar un tipo incorrecto a la variable " + v1.getValue());
                    semantic_error(e, v1);
                }
            }else{
                print_this("Error semántico ASIG_SENT");
                String e = ("Se esta intentando asignar un nuevo valor a la constante " + v1.getValue());
                semantic_error(e, v1);
            }
        }else{
            print_this("Error semántico ASIG_SENT");
            String e = ("La variable " + v1.getValue() + " no ha sido declarada");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_SENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF_SENT ::= if_t lparen EXP rparen colon COS else_t colon COS endif 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
    if(!error_detectat){
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v2.getTipus() != TipusDades.BOOLEAN){
            print_this("Error semántico IF_SENT");
            String e = ("La condición de la sentencia 'if' no es correcta");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF_SENT ::= if_t lparen EXP rparen colon COS endif 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    if(!error_detectat){
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v2.getTipus() != TipusDades.BOOLEAN){
            print_this("Error semántico IF_SENT");
            String e = ("La condición de la sentencia 'if' no es correcta");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WHILE_SENT ::= while_t lparen EXP rparen colon COS endwhile 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    if(!error_detectat){
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v2.getTipus() != TipusDades.BOOLEAN){
            print_this("Error semántico WHILE_SENT");
            String e = ("La condición de la sentencia 'while' no es correcta");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FOR_SENT ::= for_t FORINIT to FORLIMIT colon COS endfor 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    if(!error_detectat){
        Simbol aux_v2 = (Simbol) v2;
        Simbol aux_v3 = (Simbol) v3;
        if(aux_v2.getTipus() != TipusDades.INTEGER || aux_v3.getTipus() != TipusDades.INTEGER){
            print_this("Error semántico FOR_SENT");
            String e = ("La condición de la sentencia 'for' no es correcta");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TUPLA_ASSIGN ::= TUPLA_ACCESS assign EXP semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(!error_detectat){
        Tupla aux_v1 = (Tupla) v1;
        Simbol aux_v2 = (Simbol) v2;
        print_this("Asignando valor a Tupla: "+ aux_v1.getValue());
        if(aux_v1.getTipus() != aux_v2.getTipus()){
            print_this("Error semántico TUPLA_ASSIGN");
            String e = ("A la tupla " + aux_v1.getValue() + " se le esta asignando un tipo incorrecto.");
            semantic_error(e, aux_v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_ASSIGN",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ENTR_SENT ::= in lparen TIPO rparen semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTR_SENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SAL_SENT ::= out lparen OUT_EXP rparen semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SAL_SENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CRID_FUNC ::= id lparen ARGS rparen 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(!error_detectat){
        ArrayList<TipusDades> aux_v2 = (ArrayList<TipusDades>) v2;
        print_this("Llamando a Función: "+ v1.getValue());
        Funcio aux = taulaSimbols.usarFuncio(v1);
        if(aux.getValue() != ""){
            if(aux.mateixosParametres(aux_v2)){
                RESULT = aux;
            }else{
                print_this("Error semántico CRID_FUNC");
                String e = ("A la funcion " + v1.getValue() + " no se le estan pasando los parámetros correctos");
                semantic_error(e, v1);
            }
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + v1.getValue() + " no ha sido creada");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CRID_FUNC ::= id lparen rparen 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if(!error_detectat){
        print_this("Llamando a Función: "+ v1.getValue());
        Funcio aux = taulaSimbols.usarFuncio(v1);
        if(aux.getValue() != ""){
            RESULT = aux;
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + v1.getValue() + " no ha sido creada");
            semantic_error(e, v1);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNC_DECL ::= fnct TIPO id lparen PARAM_LIST rparen colon COS FINAL_RTN endfnct 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Simbol v2 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(!error_detectat){
        print_this("Declarando Función: '"+ v2.getValue() +"' de tipo '" + v1.toString() + "' y con los parámetros:");
        ArrayList<VariableConstant> aux = (ArrayList<VariableConstant>) v3;
        for(int i = 0; i < aux.size() && !error_detectat; i++){
            print_this(aux.get(i).toString());
            error_detectat = !taulaSimbols.declararVariableConstant(aux.get(i), v2.toString());
            if(error_detectat){
                print_this("Error semántico FUNC_DECL");
                String e = ("Ya existe una variable con el nombre "+ aux.get(i).getValue());
                semantic_error(e, v2);
            }
        }
        if(!error_detectat){
            error_detectat = !taulaSimbols.declararFuncio(v2.getValue(), aux, v1.toString());
            if(error_detectat){
                print_this("Error semántico FUNC_DECL");
                String e = ("Ya existe una función con el nombre '" + v2.getValue() + "'");
                semantic_error(e, v2);
            }else{
                print_this("Función '" + v2.getValue() + " de tipo " + v1.toString() + " creada con éxito");
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNC_DECL ::= fnct TIPO id lparen PARAM_LIST rparen colon FINAL_RTN endfnct 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Simbol v2 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VAR_DECL ::= val id double_colon TIPO assign EXP semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    if(!error_detectat){
        print_this("Declarando Variable '"+ v1.getValue() +"' de tipo '" + v2.toString() + "'");
        VariableConstant aux = new VariableConstant(v1.getValue(), (TipusDades) v2, false);
        error_detectat = !taulaSimbols.declararVariableConstant(aux);
        if(error_detectat){
            print_this("Error semántico VAR_DECL");
            String e = ("Ya existe una variable o constante con el nombre '" + v1.getValue() + "'");
            semantic_error(e, v1);
        }else{
            print_this("Variable '" + v1.getValue() + "' creada con éxito");
            RESULT = aux;
        }
    }else{
        RESULT = new VariableConstant();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONS_DECL ::= con id double_colon TIPO assign EXP semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    if(!error_detectat){
        print_this("Declarando Constante '"+ v1.getValue() +"' de tipo '" + v2.toString() + "'");
        VariableConstant aux = new VariableConstant(v1.getValue(), (TipusDades) v2, true);
        error_detectat = !taulaSimbols.declararVariableConstant(aux);
        if(error_detectat){
            print_this("Error semántico CONS_DECL");
            String e = ("Ya existe una variable o constante con el nombre '" + v1.getValue() + "'");
            semantic_error(e, v1);
        }else{
            print_this("Constante '" + v1.getValue() + "' creada con éxito");
            RESULT = aux;
        }
    }else{
        RESULT = new VariableConstant();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONS_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TUPLA_DECL ::= tuple id assign lbrace TIPO comma TIPO rbrace semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if(!error_detectat){
        print_this("Declarando Tupla: '"+ v1.getValue() +"' de [tipo1: "+ v2.toString() +", tipo2: "+ v3.toString() +"]");
        Tupla aux = new Tupla(v1.getValue(), (TipusDades) v2, (TipusDades) v3);
        error_detectat = !taulaSimbols.declararTupla(aux);
        if(error_detectat){
            print_this("Error semántico TUPLA_DECL");
            String e = ("Ya existe una tupla con el nombre '" + v1.getValue() + "'");
            semantic_error(e, v1);
        }else{
            print_this("Tupla '" + v1.getValue() + "["+ v2.toString() +", "+ v3.toString() +"]' creada con éxito");
            RESULT = aux;
        }
    }else{
        RESULT = new Tupla();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_DECL",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= LOG_TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= ARIT_TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= CRID_FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= id 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = taulaSimbols.usarSimbol(v1.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= TUPLA_ACCESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= ENTR_FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= SAL_FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FORINIT ::= VAR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORINIT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FORINIT ::= EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORINIT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FORLIMIT ::= CONS_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORLIMIT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FORLIMIT ::= EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORLIMIT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TUPLA_ACCESS ::= id lbracket integer_literal rbracket 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbol v2 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(!error_detectat){
        print_this("Accediendo a la Tupla: " + v1.getValue() + "(" + v2.getValue() + ")");
        Tupla aux = taulaSimbols.usarTupla(v1.getValue());
        if(aux.getValue() != ""){
            Integer index = (Integer) v2.getValue();
            if(index == 0 || index == 1){
                aux.setTipus(aux.getTipus(index));
                RESULT = aux;
            }else{
                print_this("Error semántico TUPLA_ACCESS");
                String e = ("El índice '" + index + "' de la tupla " + v1.getValue() + " no es correcto. Los índices de tupla solo permíten 0 o 1.");
                semantic_error(e, v1);
            }
        }else{
            print_this("Error semántico TUPLA_ACCESS");
            String e = ("La tupla " + v1.getValue() + " no ha sido declarada.");
            semantic_error(e, v1);
        }
    } else {
        RESULT = new Tupla();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_ACCESS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= integer 
            {
              Object RESULT =null;
		 RESULT = new Simbol("", TipusDades.INTEGER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO ::= logical 
            {
              Object RESULT =null;
		 RESULT = new Simbol("", TipusDades.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OUT_EXP ::= id 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = taulaSimbols.usarSimbol(v1.getValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OUT_EXP ::= CRID_FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OUT_EXP ::= ARIT_TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OUT_EXP ::= LOG_TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGS ::= EXP ARGS_LIST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        ArrayList<TipusDades> aux_v2 = (ArrayList<TipusDades>) v2;
        aux_v2.add(0, aux_v1.getTipus());
        RESULT = aux_v2;
    }else{
        RESULT = new ArrayList<TipusDades>();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAM_LIST ::= PARAM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<VariableConstant>(Arrays.asList((VariableConstant) v1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAM_LIST ::= PARAM comma PARAM_LIST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!error_detectat){
        VariableConstant aux_v1 = (VariableConstant) v1;
        ArrayList<VariableConstant> aux_v2 = (ArrayList<VariableConstant>) v2;
        aux_v2.add(0, aux_v1);
        RESULT = aux_v2;
    }else{
        RESULT = new ArrayList<VariableConstant>();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAM_LIST ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<TipusDades>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FINAL_RTN ::= rtrn lparen EXP rparen semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FINAL_RTN",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOG_TERM ::= EXP equal EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == aux_v2.getTipus()){
            RESULT = aux_v1;
        }else{
            print_this("Error semántico LOG_TERM");
            String e = (aux_v1.getValue() + " no es del mismo tipo que " + aux_v2.getValue());
            semantic_error(e, aux_v1);
        }
    }else{
        RESULT = new Simbol();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOG_TERM ::= EXP not_equal EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == aux_v2.getTipus()){
            RESULT = aux_v1;
        }else{
            print_this("Error semántico LOG_TERM");
            String e = (aux_v1.getValue() + " no es del mismo tipo que " + aux_v2.getValue());
            semantic_error(e, aux_v1);
        }
    }else{
        RESULT = new Simbol();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LOG_TERM ::= EXP and EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Simbol aux_v1 = (Simbol) v1;
                               aux_v1.setTipus(TipusDades.BOOLEAN);
                               RESULT = aux_v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOG_TERM ::= EXP or EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Simbol aux_v1 = (Simbol) v1;
                               aux_v1.setTipus(TipusDades.BOOLEAN);
                               RESULT = aux_v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARIT_TERM ::= ARIT_FACTOR ARIT_TERM_REST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == aux_v2.getTipus()){
            RESULT = aux_v1;
        }else{
            print_this("Error semántico ARIT_TERM");
            String e = (aux_v1.getValue() + " no es del mismo tipo que " + aux_v2.getValue());
            semantic_error(e, aux_v1);
        }
    }else{
        RESULT = new Simbol();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LIT ::= NEG_ENT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LIT ::= BOL_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENTR_FUNC ::= in lparen TIPO rparen 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTR_FUNC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SAL_FUNC ::= out lparen OUT_EXP rparen 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SAL_FUNC",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARGS_LIST ::= comma EXP ARGS_LIST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        ArrayList<TipusDades> aux_v2 = (ArrayList<TipusDades>) v2;
        aux_v2.add(0, aux_v1.getTipus());
        RESULT = aux_v2;
    }else{
        RESULT = new ArrayList<TipusDades>();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARGS_LIST ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<TipusDades>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_LIST",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAM ::= id double_colon TIPO 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VariableConstant(v1.getValue(), (TipusDades) v2, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARIT_FACTOR ::= lparen EXP rparen 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_FACTOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARIT_FACTOR ::= POS_ENT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_FACTOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARIT_TERM_REST ::= plus ARIT_FACTOR ARIT_TERM_REST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == aux_v2.getTipus()){
            RESULT = aux_v1;
        }else{
            print_this("Error semántico ARIT_TERM_REST");
            String e = (aux_v1.getValue() + " no es del mismo tipo que " + aux_v2.getValue());
            semantic_error(e, aux_v1);
        }
    }else{
        RESULT = new Simbol();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM_REST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARIT_TERM_REST ::= minus ARIT_FACTOR ARIT_TERM_REST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() == aux_v2.getTipus()){
            RESULT = aux_v1;
        }else{
            print_this("Error semántico ARIT_TERM_REST");
            String e = (aux_v1.getValue() + " no es del mismo tipo que " + aux_v2.getValue());
            semantic_error(e, aux_v1);
        }
    }else{
        RESULT = new Simbol();
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM_REST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARIT_TERM_REST ::= 
            {
              Object RESULT =null;
		 RESULT = new Simbol(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM_REST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NEG_ENT_LIT ::= minus integer_literal 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEG_ENT_LIT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BOL_LIT ::= boolean_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOL_LIT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // POS_ENT_LIT ::= integer_literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POS_ENT_LIT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
