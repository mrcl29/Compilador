
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler.sintactic;

import java.lang.Exception;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import compiler.sintactic.Symbols.*;
import compiler.c3a.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\022" +
    "\006\000\002\022\006\000\002\023\005\000\002\023\005" +
    "\000\002\024\006\000\002\025\007\000\002\026\005\000" +
    "\002\027\010\000\002\030\002\000\002\031\011\000\002" +
    "\032\005\000\002\032\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\007\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\017\006\000" +
    "\002\017\005\000\002\020\004\000\002\021\005\000\002" +
    "\021\002\000\002\011\006\000\002\011\005\000\002\012" +
    "\011\000\002\013\003\000\002\013\005\000\002\013\002" +
    "\000\002\014\005\000\002\015\004\000\002\015\003\000" +
    "\002\016\007\000\002\005\011\000\002\006\011\000\002" +
    "\007\013\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\043\003" +
    "\000\002\043\003\000\002\044\003\000\002\044\004\000" +
    "\002\045\003\000\002\046\003\000\002\042\006\000\002" +
    "\035\003\000\002\035\003\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\040\005" +
    "\000\002\040\005\000\002\050\006\000\002\037\003\000" +
    "\002\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\026\002\ufffd\004\012\007\037\010\010\011" +
    "\036\014\006\016\021\022\031\023\025\051\027\001\002" +
    "\000\022\007\037\010\010\011\036\014\006\016\021\022" +
    "\031\023\025\051\027\001\002\000\040\002\ufff3\004\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\020\ufff3\022\ufff3\023\ufff3\051\ufff3" +
    "\001\002\000\004\035\242\001\002\000\040\002\ufff8\004" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\020\ufff8\022\ufff8\023\ufff8\051" +
    "\ufff8\001\002\000\004\051\234\001\002\000\004\002\233" +
    "\001\002\000\006\024\043\025\042\001\002\000\026\002" +
    "\ufffd\004\012\007\037\010\010\011\036\014\006\016\021" +
    "\022\031\023\025\051\027\001\002\000\040\002\ufff6\004" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\020\ufff6\022\ufff6\023\ufff6\051" +
    "\ufff6\001\002\000\024\006\207\007\037\010\010\011\036" +
    "\014\006\016\021\022\031\023\025\051\027\001\002\000" +
    "\004\002\000\001\002\000\022\007\037\010\010\011\036" +
    "\014\006\016\021\022\031\023\025\051\027\001\002\000" +
    "\022\007\037\010\010\011\036\014\006\016\021\022\031" +
    "\023\025\051\027\001\002\000\014\021\060\030\052\047" +
    "\065\050\054\051\161\001\002\000\040\002\ufff9\004\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\020\ufff9\022\ufff9\023\ufff9\051\ufff9" +
    "\001\002\000\040\002\ufffb\004\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\020\ufffb\022\ufffb\023\ufffb\051\ufffb\001\002\000\040\002" +
    "\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\022\ufffc\023" +
    "\ufffc\051\ufffc\001\002\000\004\051\147\001\002\000\040" +
    "\002\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\020\ufffa\022\ufffa" +
    "\023\ufffa\051\ufffa\001\002\000\010\026\144\035\110\045" +
    "\107\001\002\000\026\002\ufffd\004\012\007\037\010\010" +
    "\011\036\014\006\016\021\022\031\023\025\051\027\001" +
    "\002\000\004\035\132\001\002\000\040\002\ufff4\004\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\020\ufff4\022\ufff4\023\ufff4\051\ufff4" +
    "\001\002\000\040\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\020\ufff5\022\ufff5\023\ufff5\051\ufff5\001\002\000\040\002" +
    "\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7\022\ufff7\023" +
    "\ufff7\051\ufff7\001\002\000\004\026\127\001\002\000\004" +
    "\035\123\001\002\000\004\051\040\001\002\000\004\040" +
    "\041\001\002\000\006\024\043\025\042\001\002\000\016" +
    "\026\uffc0\036\uffc0\037\uffc0\042\uffc0\044\uffc0\051\uffc0\001" +
    "\002\000\016\026\uffc1\036\uffc1\037\uffc1\042\uffc1\044\uffc1" +
    "\051\uffc1\001\002\000\004\026\045\001\002\000\014\021" +
    "\060\030\052\047\065\050\054\051\051\001\002\000\030" +
    "\017\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\036\uffc6\037\uffc6\041\uffc6\042\uffc6\001\002\000\030" +
    "\017\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\001\002\000\030" +
    "\017\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\001\002\000\034" +
    "\017\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\110\036\uffb8\037\uffb8\041\uffb8\042\uffb8\045\107" +
    "\001\002\000\004\047\065\001\002\000\030\017\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca" +
    "\037\uffca\041\uffca\042\uffca\001\002\000\030\017\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3" +
    "\037\uffc3\041\uffc3\042\uffc3\001\002\000\030\017\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9" +
    "\037\uffc9\041\uffc9\042\uffc9\001\002\000\030\017\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7" +
    "\037\uffb7\041\uffb7\042\uffb7\001\002\000\030\017\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8" +
    "\037\uffc8\041\uffc8\042\uffc8\001\002\000\004\035\103\001" +
    "\002\000\030\017\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\036\uffcc\037\uffcc\041\uffcc\042\uffcc\001" +
    "\002\000\030\017\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\036\uffb6\037\uffb6\041\uffb6\042\uffb6\001" +
    "\002\000\020\027\074\030\072\031\067\032\066\033\071" +
    "\034\073\041\070\001\002\000\030\017\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd" +
    "\041\uffcd\042\uffcd\001\002\000\030\017\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4" +
    "\041\uffc4\042\uffc4\001\002\000\014\021\060\030\052\047" +
    "\065\050\054\051\051\001\002\000\014\021\060\030\052" +
    "\047\065\050\054\051\051\001\002\000\040\002\uffd0\004" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\020\uffd0\022\uffd0\023\uffd0\051" +
    "\uffd0\001\002\000\014\021\060\030\052\047\065\050\054" +
    "\051\051\001\002\000\014\021\060\030\052\047\065\050" +
    "\054\051\051\001\002\000\014\021\060\030\052\047\065" +
    "\050\054\051\051\001\002\000\014\021\060\030\052\047" +
    "\065\050\054\051\051\001\002\000\030\017\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037" +
    "\uffbb\041\uffbb\042\uffbb\001\002\000\030\017\uffbc\027\074" +
    "\030\072\031\067\032\066\033\uffbc\034\uffbc\036\uffbc\037" +
    "\uffbc\041\uffbc\042\uffbc\001\002\000\030\017\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\uffba\037" +
    "\uffba\041\uffba\042\uffba\001\002\000\030\017\uffbd\027\074" +
    "\030\072\031\067\032\066\033\uffbd\034\uffbd\036\uffbd\037" +
    "\uffbd\041\uffbd\042\uffbd\001\002\000\030\017\uffbf\027\074" +
    "\030\072\031\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037" +
    "\uffbf\041\uffbf\042\uffbf\001\002\000\030\017\uffbe\027\074" +
    "\030\072\031\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\037" +
    "\uffbe\041\uffbe\042\uffbe\001\002\000\006\024\043\025\042" +
    "\001\002\000\004\036\105\001\002\000\030\017\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9" +
    "\037\uffb9\041\uffb9\042\uffb9\001\002\000\030\017\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5" +
    "\037\uffc5\041\uffc5\042\uffc5\001\002\000\004\047\121\001" +
    "\002\000\016\021\060\030\052\036\113\047\065\050\054" +
    "\051\051\001\002\000\022\027\074\030\072\031\067\032" +
    "\066\033\071\034\073\036\uffdb\042\115\001\002\000\004" +
    "\036\114\001\002\000\066\002\uffde\004\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde" +
    "\041\uffde\042\uffde\051\uffde\001\002\000\066\002\uffdf\004" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\036\uffdf\037\uffdf\041\uffdf\042\uffdf\051\uffdf\001\002\000" +
    "\014\021\060\030\052\047\065\050\054\051\051\001\002" +
    "\000\004\036\uffdd\001\002\000\022\027\074\030\072\031" +
    "\067\032\066\033\071\034\073\036\uffdb\042\115\001\002" +
    "\000\004\036\uffdc\001\002\000\004\046\122\001\002\000" +
    "\032\017\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2\001" +
    "\002\000\014\021\060\030\052\047\065\050\054\051\051" +
    "\001\002\000\020\027\074\030\072\031\067\032\066\033" +
    "\071\034\073\036\125\001\002\000\004\037\126\001\002" +
    "\000\022\007\uffed\010\uffed\011\uffed\014\uffed\016\uffed\022" +
    "\uffed\023\uffed\051\uffed\001\002\000\014\021\060\030\052" +
    "\047\065\050\054\051\051\001\002\000\020\027\074\030" +
    "\072\031\067\032\066\033\071\034\073\041\131\001\002" +
    "\000\040\002\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1" +
    "\022\ufff1\023\ufff1\051\ufff1\001\002\000\014\021\060\030" +
    "\052\047\065\050\054\051\051\001\002\000\020\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffe3\001" +
    "\002\000\020\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\036\uffe0\001\002\000\004\036\141\001\002\000" +
    "\020\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\036\uffe2\001\002\000\016\027\074\030\072\031\067\032" +
    "\066\033\071\034\073\001\002\000\020\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffe1\001\002\000" +
    "\004\041\142\001\002\000\040\002\uffe4\004\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\020\uffe4\022\uffe4\023\uffe4\051\uffe4\001\002" +
    "\000\004\002\ufffe\001\002\000\014\021\060\030\052\047" +
    "\065\050\054\051\051\001\002\000\020\027\074\030\072" +
    "\031\067\032\066\033\071\034\073\041\146\001\002\000" +
    "\040\002\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\022" +
    "\ufff2\023\ufff2\051\ufff2\001\002\000\004\026\150\001\002" +
    "\000\004\043\151\001\002\000\006\024\043\025\042\001" +
    "\002\000\004\042\153\001\002\000\006\024\043\025\042" +
    "\001\002\000\004\044\155\001\002\000\004\041\156\001" +
    "\002\000\040\002\uffce\004\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\020" +
    "\uffce\022\uffce\023\uffce\051\uffce\001\002\000\004\017\167" +
    "\001\002\000\020\017\uffe7\027\074\030\072\031\067\032" +
    "\066\033\071\034\073\001\002\000\030\017\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\110\037" +
    "\uffb8\040\165\045\107\001\002\000\004\026\163\001\002" +
    "\000\014\021\060\030\052\047\065\050\054\051\051\001" +
    "\002\000\020\017\uffe8\027\074\030\072\031\067\032\066" +
    "\033\071\034\073\001\002\000\006\024\043\025\042\001" +
    "\002\000\012\026\uffd4\036\uffd4\037\uffd4\042\uffd4\001\002" +
    "\000\014\021\060\030\052\047\065\050\054\051\161\001" +
    "\002\000\020\027\074\030\072\031\067\032\066\033\071" +
    "\034\073\037\uffe5\001\002\000\004\037\173\001\002\000" +
    "\004\037\uffe6\001\002\000\022\007\037\010\010\011\036" +
    "\014\006\016\021\022\031\023\025\051\027\001\002\000" +
    "\004\020\177\001\002\000\034\006\uffd2\007\037\010\010" +
    "\011\036\012\uffd2\013\uffd2\014\006\015\uffd2\016\021\020" +
    "\uffd2\022\031\023\025\051\027\001\002\000\014\006\uffd3" +
    "\012\uffd3\013\uffd3\015\uffd3\020\uffd3\001\002\000\040\002" +
    "\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\022\uffe9\023" +
    "\uffe9\051\uffe9\001\002\000\004\013\201\001\002\000\040" +
    "\002\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\022\ufff0" +
    "\023\ufff0\051\ufff0\001\002\000\006\012\203\013\204\001" +
    "\002\000\004\037\205\001\002\000\040\002\uffef\004\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\020\uffef\022\uffef\023\uffef\051\uffef" +
    "\001\002\000\022\007\uffee\010\uffee\011\uffee\014\uffee\016" +
    "\uffee\022\uffee\023\uffee\051\uffee\001\002\000\004\006\207" +
    "\001\002\000\004\035\212\001\002\000\004\005\211\001" +
    "\002\000\026\002\uffd9\004\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\014\uffd9\016\uffd9\022\uffd9\023\uffd9\051\uffd9\001\002\000" +
    "\014\021\060\030\052\047\065\050\054\051\051\001\002" +
    "\000\020\027\074\030\072\031\067\032\066\033\071\034" +
    "\073\036\214\001\002\000\004\041\215\001\002\000\004" +
    "\005\uffd1\001\002\000\004\005\217\001\002\000\026\002" +
    "\uffda\004\uffda\007\uffda\010\uffda\011\uffda\014\uffda\016\uffda" +
    "\022\uffda\023\uffda\051\uffda\001\002\000\004\002\uffff\001" +
    "\002\000\004\051\222\001\002\000\004\035\223\001\002" +
    "\000\006\036\uffd5\051\226\001\002\000\004\036\231\001" +
    "\002\000\006\036\uffd7\042\227\001\002\000\004\040\165" +
    "\001\002\000\006\036\uffd5\051\226\001\002\000\004\036" +
    "\uffd6\001\002\000\004\037\232\001\002\000\024\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\014\uffd8\016\uffd8\022\uffd8\023" +
    "\uffd8\051\uffd8\001\002\000\004\002\001\001\002\000\004" +
    "\040\235\001\002\000\006\024\043\025\042\001\002\000" +
    "\004\026\237\001\002\000\014\021\060\030\052\047\065" +
    "\050\054\051\051\001\002\000\020\027\074\030\072\031" +
    "\067\032\066\033\071\034\073\041\241\001\002\000\040" +
    "\002\uffcf\004\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf\022\uffcf" +
    "\023\uffcf\051\uffcf\001\002\000\014\021\uffea\030\uffea\047" +
    "\uffea\050\uffea\051\uffea\001\002\000\014\021\060\030\052" +
    "\047\065\050\054\051\051\001\002\000\020\027\074\030" +
    "\072\031\067\032\066\033\071\034\073\036\245\001\002" +
    "\000\004\037\246\001\002\000\022\007\uffeb\010\uffeb\011" +
    "\uffeb\014\uffeb\016\uffeb\022\uffeb\023\uffeb\051\uffeb\001\002" +
    "\000\004\015\250\001\002\000\040\002\uffec\004\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\020\uffec\022\uffec\023\uffec\051\uffec\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\050\002\010\003\015\004\023\005\032\006" +
    "\031\007\004\010\012\011\027\012\014\017\013\022\022" +
    "\023\025\024\017\025\016\026\021\027\003\031\006\034" +
    "\033\042\034\001\001\000\042\004\023\005\032\006\031" +
    "\007\004\010\174\015\246\017\013\022\022\023\025\024" +
    "\017\025\016\026\021\027\003\031\006\034\033\042\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\220" +
    "\001\001\000\046\003\217\004\023\005\032\006\031\007" +
    "\004\010\012\011\027\012\014\017\013\022\022\023\025" +
    "\024\017\025\016\026\021\027\003\031\006\034\033\042" +
    "\034\001\001\000\002\001\001\000\044\004\023\005\032" +
    "\006\031\007\004\010\174\015\205\016\207\017\013\022" +
    "\022\023\025\024\017\025\016\026\021\027\003\031\006" +
    "\034\033\042\034\001\001\000\002\001\001\000\042\004" +
    "\023\005\032\006\031\007\004\010\174\015\201\017\013" +
    "\022\022\023\025\024\017\025\016\026\021\027\003\031" +
    "\006\034\033\042\034\001\001\000\042\004\023\005\032" +
    "\006\031\007\004\010\174\015\177\017\013\022\022\023" +
    "\025\024\017\025\016\026\021\027\003\031\006\034\033" +
    "\042\034\001\001\000\034\014\161\017\055\032\156\036" +
    "\157\037\046\040\060\041\063\042\061\043\052\044\056" +
    "\045\045\046\047\050\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\142\004\023\005" +
    "\032\006\031\007\004\010\012\011\027\012\014\017\013" +
    "\022\022\023\025\024\017\025\016\026\021\027\003\031" +
    "\006\034\033\042\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\017\055\036\062\037\046" +
    "\040\060\041\063\042\061\043\052\044\056\045\045\046" +
    "\047\050\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\017\055\036\101\037" +
    "\046\040\060\041\063\042\061\043\052\044\056\045\045" +
    "\046\047\050\054\001\001\000\030\017\055\036\100\037" +
    "\046\040\060\041\063\042\061\043\052\044\056\045\045" +
    "\046\047\050\054\001\001\000\002\001\001\000\030\017" +
    "\055\036\077\037\046\040\060\041\063\042\061\043\052" +
    "\044\056\045\045\046\047\050\054\001\001\000\030\017" +
    "\055\036\076\037\046\040\060\041\063\042\061\043\052" +
    "\044\056\045\045\046\047\050\054\001\001\000\030\017" +
    "\055\036\075\037\046\040\060\041\063\042\061\043\052" +
    "\044\056\045\045\046\047\050\054\001\001\000\030\017" +
    "\055\036\074\037\046\040\060\041\063\042\061\043\052" +
    "\044\056\045\045\046\047\050\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\017\055\020\111\036\110\037" +
    "\046\040\060\041\063\042\061\043\052\044\056\045\045" +
    "\046\047\050\054\001\001\000\004\021\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\017\055\036\116\037\046\040\060\041\063\042\061\043" +
    "\052\044\056\045\045\046\047\050\054\001\001\000\002" +
    "\001\001\000\004\021\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\017\055\036\123" +
    "\037\046\040\060\041\063\042\061\043\052\044\056\045" +
    "\045\046\047\050\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\017\055\036\127\037" +
    "\046\040\060\041\063\042\061\043\052\044\056\045\045" +
    "\046\047\050\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\017\055\036\136\037\132\040\135\041\137" +
    "\042\061\043\133\044\056\045\045\046\047\047\134\050" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\017\055\036\144\037\046\040\060\041\063\042" +
    "\061\043\052\044\056\045\045\046\047\050\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\151\001\001\000\002\001\001" +
    "\000\004\035\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\017\055\036" +
    "\163\037\046\040\060\041\063\042\061\043\052\044\056" +
    "\045\045\046\047\050\054\001\001\000\002\001\001\000" +
    "\004\035\165\001\001\000\002\001\001\000\034\014\171" +
    "\017\055\033\170\036\167\037\046\040\060\041\063\042" +
    "\061\043\052\044\056\045\045\046\047\050\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\023\005\032\006\031\007\004\010\174\015\173" +
    "\017\013\022\022\023\025\024\017\025\016\026\021\027" +
    "\003\031\006\034\033\042\034\001\001\000\002\001\001" +
    "\000\042\004\023\005\032\006\031\007\004\010\174\015" +
    "\175\017\013\022\022\023\025\024\017\025\016\026\021" +
    "\027\003\031\006\034\033\042\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\017\055\036" +
    "\212\037\046\040\060\041\063\042\061\043\052\044\056" +
    "\045\045\046\047\050\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\223\014\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\227\014" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\235\001\001\000\002\001\001\000\030\017\055\036\237" +
    "\037\046\040\060\041\063\042\061\043\052\044\056\045" +
    "\045\046\047\050\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\242\001\001\000\030\017\055\036" +
    "\243\037\046\040\060\041\063\042\061\043\052\044\056" +
    "\045\045\046\047\050\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }
***/

    TaulaSimbols taulaSimbols = new TaulaSimbols();

    public boolean error_detectat = false;

    public boolean DEBUG = false;
    public void print_this(Object msg){
        if(DEBUG){
            System.out.println(msg);
        }
    }

    GenerarCodi c3a = new GenerarCodi();

    int nbytes = 4;
    String buid = "";

    /**************************************************************
    ************************ GESTIÓ ERRORS ************************
    **************************************************************/

    @Override
    public void syntax_error(Symbol s) {
        report_error("Error sintáctico", s);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws Exception {
        report_error("Error sintáctico inrrecuperable", s);
        done_parsing();
    }

    @Override
    public void report_error(String t, Object info) {
        print_this("Reportando error...");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();

            print_error("Error en la linea " + l.getLine() + " y columna " + l.getColumn() + ": " + info.toString() + " --> " + t);
        }else{
            print_error("info no es Symbol en report_error");
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error fatal ("+message+")", info);
        done_parsing();
    }

    /**
    * Mètode per mostrar un error semàntic
    **/
    public void semantic_error(String t, Object info){
        if(info instanceof Simbol){
            Simbol token = (Simbol) info;

            print_error("Error semántico en la linea " + token.getFila() + " y columna " + token.getColumna() + " --> " + t);
        }else{
            print_error("info no es Symbol en semantic_error");
        }
        done_parsing();
    }

    /**
    * Mètode per mostrar un error
    **/
    public void print_error(String msg){
        error_detectat = true;
        System.err.println("Error--> " + msg);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= P 
            {
              Object RESULT =null;
		 c3a.tancar(); c3a.crearEnsamblador(); done_parsing(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= SENT P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // P ::= FUNC_DECL P 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // P ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENT ::= DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENT ::= ASIG_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENT ::= IF_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENT ::= WHILE_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENT ::= FOR_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= SAL_SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT ::= CRID_FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECL ::= VAR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECL ::= CONS_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECL ::= TUPLA_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIG_SENT ::= id assign EXP semicolon 
            {
              Object RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en ASIG_SENT para símbolo");
    if(!error_detectat){
        VariableConstant id = taulaSimbols.usarVariableConstant(vid.getValue());
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico ASIG_SENT");
            String e = ("Valor no asignado");
            semantic_error(e, vE);
        }else{
            if(id.getValue() != ""){
                if(!id.isEsConstant()){
                    if(id.getTipus() != E.getTipus()){
                        print_this("Error semántico ASIG_SENT");
                        String e = ("Se está intentando asignar un tipo incorrecto a la variable " + vid.getValue());
                        semantic_error(e, vE);
                    }else{
                        id.setValor(E.getValor());

                        c3a.genera("copy", E.getR(), buid, id.getR()); // copy R.r = E.r

                        RESULT = id;
                    }
                }else{
                    print_this("Error semántico ASIG_SENT");
                    String e = ("Se esta intentando asignar un nuevo valor a la constante " + vid.getValue());
                    semantic_error(e, vid);
                }
            }else{
                print_this("Error semántico ASIG_SENT");
                String e = ("La variable " + vid.getValue() + " no ha sido declarada");
                semantic_error(e, vid);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIG_SENT ::= TUPLA_ACCESS assign EXP semicolon 
            {
              Object RESULT =null;
		int vTUPLA_ACCESSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vTUPLA_ACCESSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object vTUPLA_ACCESS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en ASIG_SENT para tupla");
    if(!error_detectat){
        Tupla TUPLA_ACCESS = (Tupla) vTUPLA_ACCESS;
        Simbol E = (Simbol) vE;
        print_this("Asignando valor a Tupla: "+ TUPLA_ACCESS.getValue());
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico ASIG_SENT");
            String e = ("Valor no asignado");
            semantic_error(e, vE);
        }else{
            if(TUPLA_ACCESS.getTipus() != E.getTipus()){
                print_this("Error semántico ASIG_SENT");
                String e = ("A la tupla " + TUPLA_ACCESS.getValue() + " se le esta asignando un tipo incorrecto.");
                semantic_error(e, vTUPLA_ACCESS);
            }else{
                if(TUPLA_ACCESS.getRef() == 0){
                    TUPLA_ACCESS.setVal1(E.getValor());
                }else{
                    TUPLA_ACCESS.setVal2(E.getValor());
                }

                c3a.genera("ind_ass", E.getR(), TUPLA_ACCESS.getD(), TUPLA_ACCESS.getR());

                RESULT = TUPLA_ACCESS;
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG_SENT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IF_SENT ::= IF_ELSE COS endif 
            {
              Object RESULT =null;
		int vIF_ELSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vIF_ELSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vIF_ELSE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en IF_SENT con else");
    if(!error_detectat){
        Simbol IF_ELSE = (Simbol) vIF_ELSE;

        c3a.genera("skip", buid, buid, IF_ELSE.getEtiqueta()); //efi: skip
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IF_SENT ::= IF_INIT COS endif 
            {
              Object RESULT =null;
		int vIF_INITleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vIF_INITright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vIF_INIT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en IF_SENT sin else");
    if(!error_detectat){
        Simbol IF_INIT = (Simbol) vIF_INIT;

        c3a.genera("skip", buid, buid, IF_INIT.getEtiqueta()); //efi: skip
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF_ELSE ::= IF_INIT COS else_t colon 
            {
              Object RESULT =null;
		int vIF_INITleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vIF_INITright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object vIF_INIT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    print_this("Estas en IF_ELSE");
    if(!error_detectat){
        Simbol IF_INIT = (Simbol) vIF_INIT;

        String efi = c3a.novaetiqueta();
        c3a.genera("goto", buid, buid, efi);                  //goto efi
        c3a.genera("skip", buid, buid, IF_INIT.getEtiqueta()); //e: skip
        IF_INIT.setEtiqueta(efi);

        RESULT = IF_INIT;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_ELSE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF_INIT ::= if_t lparen EXP rparen colon 
            {
              Object RESULT =null;
		int vEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en IF_INIT");
    if(!error_detectat){
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico IF_INIT");
            String e = ("Debes asignar una condición al if");
            semantic_error(e, vE);
        }else{
            if(E.getTipus() != TipusDades.BOOLEAN){
                print_this("Error semántico IF_INIT");
                String e = ("La condición de la sentencia 'if' no es correcta");
                semantic_error(e, vE);
            }else{

                String e = c3a.novaetiqueta();
                c3a.genera("if_EQ", E.getR(), "0", e); // if E.r=0 goto e
                E.setEtiqueta(e);

                RESULT = E;
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_INIT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // WHILE_SENT ::= WHILE_REP COS endwhile 
            {
              Object RESULT =null;
		int vWHILE_REPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vWHILE_REPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vWHILE_REP = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en WHILE_SENT");
    if(!error_detectat){
        Simbol WHILE_REP = (Simbol) vWHILE_REP;

        c3a.genera("goto", buid, buid, WHILE_REP.getEtiqueta()); // goto WHILE_REP.ei
        c3a.genera("skip", buid, buid, WHILE_REP.getEtiquetafi()); // WHILE_REP.efi: skip
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WHILE_REP ::= while_t lparen M EXP rparen colon 
            {
              Object RESULT =null;
		int vMleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vMright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object vM = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en WHILE_REP");
    if(!error_detectat){
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico WHILE_SENT");
            String e = ("Debes asignar una condición al bucle");
            semantic_error(e, vE);
        }else{
            if(E.getTipus() != TipusDades.BOOLEAN){
                print_this("Error semántico WHILE_SENT");
                String e = ("La condición de la sentencia 'while' no es correcta");
                semantic_error(e, vE);
            }else{
                Simbol WHILE_REP = new Simbol();
                Simbol M = (Simbol) vM;

                String efi = c3a.novaetiqueta();
                c3a.genera("if_EQ", E.getR(), "0", efi); // if E.r = 0 goto efi
                WHILE_REP.setEtiquetafi(efi);
                WHILE_REP.setEtiqueta(M.getEtiqueta());

                RESULT = WHILE_REP;
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_REP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // M ::= 
            {
              Object RESULT =null;
		
    Simbol M = new Simbol();

    String ei = c3a.novaetiqueta();
    c3a.genera("skip", buid, buid, ei); // ei: skip
    M.setEtiqueta(ei);

    RESULT = M;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FOR_SENT ::= for_t FORINIT to FORLIMIT colon COS endfor 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    print_this("Estas en FOR_SENT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() != TipusDades.INTEGER){
            print_this("Error semántico FOR_SENT");
            String e = ("La condición init de la sentencia 'for' no es correcta");
            semantic_error(e, v1);
        }else if(aux_v2.getTipus() != TipusDades.INTEGER){
            print_this("Error semántico FOR_SENT");
            String e = ("La condición limit de la sentencia 'for' no es correcta");
            semantic_error(e, v2);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENT",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FORINIT ::= PARAM assign EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en FORINIT");
    if(!error_detectat){
        VariableConstant aux_v1 = (VariableConstant) v1;
        Simbol aux_v2 = (Simbol) v2;
        if(aux_v1.getTipus() != aux_v2.getTipus()){
            print_this("Error semántico FORINIT");
            String e = ("Estas asignando un tipo incorrecto al parámetro del bucle for");
            semantic_error(e, v2);
        }else{
            RESULT = aux_v1;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORINIT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORINIT ::= EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en FORINIT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico FORINIT");
            String e = ("Inicio del bucle for no especificado");
            semantic_error(e, v1);
        }else{
            RESULT = aux_v1;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORINIT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORLIMIT ::= PARAM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORLIMIT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FORLIMIT ::= EXP 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en FORLIMIT");
    if(!error_detectat){
        Simbol aux_v1 = (Simbol) v1;
        if(aux_v1.getTipus() == TipusDades.NULL){
            print_this("Error semántico FORLIMIT");
            String e = ("Límite del bucle for no especificado");
            semantic_error(e, v1);
        }else{
            RESULT = aux_v1;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORLIMIT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SAL_SENT ::= out lparen OUT_EXP rparen semicolon 
            {
              Object RESULT =null;
		int vOUTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vOUTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vOUT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en SAL_SENT");
    Simbol OUT = (Simbol) vOUT;
    if(OUT.getTipus() == TipusDades.NULL){
        print_this("Error semántico SAL_SENT");
        String e = ("Salida vacía");
        semantic_error(e, vOUT);
    }else{
        String i;
        if(OUT.getTipus() == TipusDades.INTEGER){
            i = "1";
        }else{
            i = "2";
        }

        String d0 = c3a.novavar(OUT);
        c3a.genera("copy", i, buid, d0);
        String d1 = c3a.novavar(OUT);
        c3a.genera("copy", OUT.getR(), buid, d1);
        c3a.genera("out", d0, buid, d1);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SAL_SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OUT_EXP ::= CRID_SIMB 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en OUT_EXP llamada a símbolo"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OUT_EXP ::= ARIT_TERM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en OUT_EXP llamada a término aritmético"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OUT_EXP ::= LOG_TERM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en OUT_EXP llamada a término lógico"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OUT_EXP ::= LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en OUT_EXP llamada a literal"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OUT_EXP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CRID_FUNC ::= id lparen ARGS rparen 
            {
              Object RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vARGS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en CRID_FUNC para argumentos");
    if(!error_detectat){
        print_this("Llamando a Función: "+ vid.getValue());
        Funcio id = taulaSimbols.usarFuncio(vid.getValue());
        ArrayList<Simbol> ARGS = (ArrayList<Simbol>) vARGS;
        if(id.getValue() != ""){
            if(id.mateixosParametres(ARGS)){

                c3a.genera("call", buid, buid, id.getR());

                RESULT = id;
            }else{
                print_this("Error semántico CRID_FUNC");
                String e = ("A la funcion " + vid.getValue() + " no se le estan pasando los parámetros correctos: "+ARGS.toString());
                semantic_error(e, vid);
            }
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + vid.getValue() + " no ha sido creada");
            semantic_error(e, vid);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CRID_FUNC ::= id lparen rparen 
            {
              Object RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en CRID_FUNC sin argumentos");
    if(!error_detectat){
        print_this("Llamando a Función: "+ vid.getValue());
        Funcio id = taulaSimbols.usarFuncio(vid.getValue());
        ArrayList<Simbol> aux_v2 = new ArrayList<Simbol>();
        if(id.getValue() != ""){
            if(id.mateixosParametres(aux_v2)){

                c3a.genera("call", buid, buid, id.getR());

                RESULT = id;
            }else{
                print_this("Error semántico CRID_FUNC");
                String e = ("A la funcion " + vid.getValue() + " no se le estan pasando los parámetros correctos: "+aux_v2.toString());
                semantic_error(e, vid);
            }
        }else{
            print_this("Error semántico CRID_FUNC");
            String e = ("La funcion " + vid.getValue() + " no ha sido creada");
            semantic_error(e, vid);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_FUNC",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGS ::= EXP ARGS_LIST 
            {
              Object RESULT =null;
		int vEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vARGS_LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vARGS_LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vARGS_LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ARGS");
    if(!error_detectat){
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico ARGS");
            String e = ("Argumento vacío");
            semantic_error(e, vE);
        }else{
            ArrayList<Simbol> ARGS_LIST = (ArrayList<Simbol>) vARGS_LIST;
            ARGS_LIST.add(0, E);

            c3a.genera("param_s", buid, buid, E.getR());

            RESULT = ARGS_LIST;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARGS_LIST ::= comma EXP ARGS_LIST 
            {
              Object RESULT =null;
		int vEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vARGS_LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vARGS_LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vARGS_LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ARGS_LIST");
    if(!error_detectat){
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico ARGS_LIST");
            String e = ("Argumento vacío");
            semantic_error(e, vE);
        }else{
            ArrayList<Simbol> ARGS_LIST = (ArrayList<Simbol>) vARGS_LIST;
            ARGS_LIST.add(0, E);

            c3a.genera("param_s", buid, buid, E.getR());

            RESULT = ARGS_LIST;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_LIST",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARGS_LIST ::= 
            {
              Object RESULT =null;
		 print_this("Estas en ARGS_LIST epsilon"); RESULT = new ArrayList<Simbol>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_LIST",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNC_DECL ::= FUNCINIT COS FINAL_RTN endfnct 
            {
              Object RESULT =null;
		int vFUNCINITleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vFUNCINITright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object vFUNCINIT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vRTNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vRTNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vRTN = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en FUNC_DECL con cuerpo");
    if(!error_detectat){
        Simbol FUNCINIT = (Simbol) vFUNCINIT;
        Simbol RTN = (Simbol) vRTN;
        if(RTN.getTipus() != FUNCINIT.getTipus()){
            print_this("Error semántico FUNC_DECL");
            String e = ("El valor devuelto no corresponde con el tipo de la función.");
            semantic_error(e, vRTN);
        }else{

            c3a.genera("rtn", buid, buid, FUNCINIT.getR());
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNC_DECL ::= FUNCINIT FINAL_RTN endfnct 
            {
              Object RESULT =null;
		int vFUNCINITleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vFUNCINITright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vFUNCINIT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vRTNleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vRTNright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vRTN = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en FUNC_DECL sin cuerpo");
    if(!error_detectat){
        Simbol FUNCINIT = (Simbol) vFUNCINIT;
        Simbol RTN = (Simbol) vRTN;
        if(RTN.getTipus() != FUNCINIT.getTipus()){
            print_this("Error semántico FUNC_DECL");
            String e = ("El valor devuelto no corresponde con el tipo de la función.");
            semantic_error(e, vRTN);
        }else{

            c3a.genera("rtn", buid, buid, FUNCINIT.getR());
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_DECL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCINIT ::= fnct TIPO id lparen PARAM_LIST rparen colon 
            {
              Object RESULT =null;
		int vTIPOleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vTIPOright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object vTIPO = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vPARAM_LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vPARAM_LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vPARAM_LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en FUNCINIT con cuerpo");
    if(!error_detectat){
        print_this("Declarando Función: "+ vid.getValue());
        Simbol TIPO = (Simbol) vTIPO;
        Simbol id = (Simbol) vid;
        ArrayList<VariableConstant> PARAM_LIST = (ArrayList<VariableConstant>) vPARAM_LIST;

        Funcio funcio = new Funcio(id.getValue(), PARAM_LIST, TIPO.getTipus());
        error_detectat = !taulaSimbols.declararFuncio(funcio);
        if(error_detectat){
            print_this("Error semántico FUNCINIT");
            String e = ("Ya existe una función con el nombre '" + vid.getValue() + "'");
            semantic_error(e, vid);
        }else{
            print_this("Función '" + id.getValue() + " de tipo " + TIPO.getTipus().toString() + " creada con éxito");

            String e = c3a.novaetiqueta();
            funcio.setEtiqueta(e);
            String np = c3a.nouproc(funcio);
            c3a.genera("skip", buid, buid, e);
            c3a.genera("pmb", buid, buid, np);
            funcio.setR(np);

            RESULT = funcio;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCINIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAM_LIST ::= PARAM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en PARAM_LIST");
    if(!error_detectat){
        RESULT = new ArrayList<VariableConstant>(Arrays.asList((VariableConstant) v1));
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAM_LIST ::= PARAM comma PARAM_LIST 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en PARAM_LIST");
    if(!error_detectat){
        VariableConstant aux_v1 = (VariableConstant) v1;
        ArrayList<VariableConstant> aux_v2 = (ArrayList<VariableConstant>) v2;
        aux_v2.add(0, aux_v1);
        RESULT = aux_v2;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAM_LIST ::= 
            {
              Object RESULT =null;
		 print_this("Estas en PARAM_LIST epsilon"); RESULT = new ArrayList<VariableConstant>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAM ::= id double_colon TIPO 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en PARAM");
    if(!error_detectat){
        print_this("Declarando Parámetro "+ v1.getValue());
        Simbol aux_v1 = (Simbol) v1;
        Simbol aux_v2 = (Simbol) v2;
        error_detectat = !taulaSimbols.declararVariableConstant(new VariableConstant(v1.getValue(), aux_v2.getTipus(), false));
        if(error_detectat){
            print_this("Error semántico PARAM");
            String e = ("Ya existe una variable o constante con el nombre '" + v1.getValue() + "'");
            semantic_error(e, v1);
        }else{
            print_this("Parámetro '" + v1.getValue() + "' creado con éxito");
            RESULT = new VariableConstant(v1.getValue(), aux_v2.getTipus(), false);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COS ::= SENT COS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COS ::= SENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FINAL_RTN ::= rtrn lparen EXP rparen semicolon 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en FINAL_RTN con cuerpo");
    Simbol aux_v1 = (Simbol) v1;
    if(aux_v1.getTipus() == TipusDades.NULL){
        print_this("Error semántico FINAL_RTN");
        String e = ("No se ha devuelto ningún valor");
        semantic_error(e, v1);
    }else{
        RESULT = aux_v1;
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FINAL_RTN",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAR_DECL ::= val id double_colon TIPO assign EXP semicolon 
            {
              Object RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vTIPOleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vTIPOright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object vTIPO = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en VAR_DECL");
    if(!error_detectat){
        print_this("Declarando Variable "+ vid.getValue());
        Simbol id = (Simbol) vid;
        Simbol TIPO = (Simbol) vTIPO;
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico VAR_DECL");
            String e = ("Valor no asignado");
            semantic_error(e, vE);
        }else{
            if(E.getTipus() != TIPO.getTipus()){
                print_this("Error semántico VAR_DECL");
                String e = ("A la variable " + id.getValue() + " de tipo " + TIPO.getTipus() + " no se le esta asignando un valor del tipo correcto: " + E.getTipus());
                semantic_error(e, vE);
            }else{
                VariableConstant varcon = new VariableConstant(id.getValue(), TIPO.getTipus(), false);
                error_detectat = !taulaSimbols.declararVariableConstant(varcon);
                if(error_detectat){
                    print_this("Error semántico VAR_DECL");
                    String e = ("Ya existe una variable o constante con el nombre '" + varcon.getValue() + "'");
                    semantic_error(e, vid);
                }else{
                    print_this("Variable '" + varcon.getValue() + "' de tipo '" + varcon.getTipus() + "' creada con éxito");
                    varcon.setValor(E.getValor());

                    String t_id = c3a.novavar(varcon);
                    c3a.genera("copy", E.getR(), buid, t_id); // id.r = E.r

                    varcon.setR(t_id);
                    RESULT = varcon;
                }
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONS_DECL ::= con id double_colon TIPO assign EXP semicolon 
            {
              Object RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vTIPOleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vTIPOright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object vTIPO = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en CONS_DECL");
    if(!error_detectat){
        print_this("Declarando Variable "+ vid.getValue());
        Simbol id = (Simbol) vid;
        Simbol TIPO = (Simbol) vTIPO;
        Simbol E = (Simbol) vE;
        if(E.getTipus() == TipusDades.NULL){
            print_this("Error semántico CONS_DECL");
            String e = ("Valor no asignado");
            semantic_error(e, vE);
        }else{
            if(E.getTipus() != TIPO.getTipus()){
                print_this("Error semántico VAR_DECL");
                String e = ("A la constante " + id.getValue() + " de tipo " + TIPO.getTipus() + " no se le esta asignando un valor del tipo correcto: " + E.getTipus());
                semantic_error(e, vE);
            }else{
                VariableConstant varcon = new VariableConstant(id.getValue(), TIPO.getTipus(), true);
                error_detectat = !taulaSimbols.declararVariableConstant(varcon);
                if(error_detectat){
                    print_this("Error semántico VAR_DECL");
                    String e = ("Ya existe una variable o constante con el nombre '" + varcon.getValue() + "'");
                    semantic_error(e, vid);
                }else{
                    print_this("Constante '" + varcon.getValue() + "' creada con éxito");
                    varcon.setValor(E.getValor());

                    String t_id = c3a.novavar(varcon);
                    c3a.genera("copy", E.getR(), buid, t_id); // id.r = E.r

                    varcon.setR(t_id);
                    RESULT = varcon;
                }
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONS_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TUPLA_DECL ::= tuple id assign lbrace TIPO comma TIPO rbrace semicolon 
            {
              Object RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vTIPO1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vTIPO1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object vTIPO1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vTIPO2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vTIPO2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vTIPO2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    print_this("Estas en TUPLA_DECL");
    if(!error_detectat){
        print_this("Declarando Tupla: "+ vid.getValue());
        Simbol id = (Simbol) vid;
        Simbol TIPO1 = (Simbol) vTIPO1;
        Simbol TIPO2 = (Simbol) vTIPO2;
        Tupla tupla = new Tupla(id.getValue(), TIPO1.getTipus(), TIPO2.getTipus());
        error_detectat = !taulaSimbols.declararTupla(tupla);
        if(error_detectat){
            print_this("Error semántico TUPLA_DECL");
            String e = ("Ya existe una tupla con el nombre '" + id.getValue() + "'");
            semantic_error(e, vid);
        }else{
            print_this("Tupla '" + id.getValue() + "["+ TIPO1.getTipus().toString() +", "+ TIPO2.getTipus().toString() +"]' creada con éxito");

            String t1 = c3a.novavar(tupla);
            tupla.setD("0");
            String t2 = c3a.novavar(tupla);
            tupla.setR(t1);

            RESULT = tupla;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_DECL",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= LOG_TERM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP termino lógico"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= ARIT_TERM 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP termino aritmético"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= CRID_SIMB 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP llamada a símbolo"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP llamada a literal"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= ENTR_FUNC 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en EXP entrada de sistema"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LIT ::= ENT_LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en LIT integer"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LIT ::= BOL_LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en LIT booleano"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LIT",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ENT_LIT ::= POS_ENT_LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en ENT_LIT positivo"); RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENT_LIT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ENT_LIT ::= minus POS_ENT_LIT 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ENT_LIT negativo");
    Simbol aux_v1 = (Simbol) v1;
    aux_v1.setValor(-1*aux_v1.getValor());

    String t = c3a.novavar(aux_v1);
    c3a.genera("neg", aux_v1.getR(), buid, t);
    aux_v1.setR(t);

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENT_LIT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // POS_ENT_LIT ::= integer_literal 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Positive integer");
    Simbol aux_v1 = (Simbol) v1;
    aux_v1.setValor((Integer) aux_v1.getValue());
    aux_v1.setValue("integer_literal");

    String t = c3a.novavar(aux_v1);
    c3a.genera("copy", String.valueOf(aux_v1.getValor()), buid, t);
    aux_v1.setR(t);

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POS_ENT_LIT",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BOL_LIT ::= boolean_literal 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol v1 = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Boolean literal");
    Simbol aux_v1 = (Simbol) v1;
    if((String) aux_v1.getValue() == "TRUE" || (String) aux_v1.getValue() == "true"){
        aux_v1.setValor(-1);
    }else{
        aux_v1.setValor(0);
    }
    aux_v1.setValue("boolean_literal");

    String t = c3a.novavar(aux_v1);
    c3a.genera("copy", String.valueOf(aux_v1.getValor()), buid, t);
    aux_v1.setR(t);

    RESULT = aux_v1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOL_LIT",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TUPLA_ACCESS ::= id lbracket integer_literal rbracket 
            {
              Object RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vindexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vindexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbol vindex = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en TUPLA_ACCESS");
    if(!error_detectat){
        print_this("Accediendo a la Tupla: " + vid.getValue() + "(" + vindex.getValue() + ")");
        Simbol id = (Simbol) vid;
        Simbol index = (Simbol) vindex;
        index.setValor((Integer) index.getValue());
        index.setValue("integer_literal");
        Tupla TUPLA = taulaSimbols.usarTupla(id.getValue());
        if(TUPLA.getValue() != ""){
            if(index.getValor() == 0 || index.getValor() == 1){
                TUPLA.setRef(index.getValor());
                TUPLA.setValor(TUPLA.getVal(TUPLA.getRef()));
                TUPLA.setTipus(TUPLA.getTipus(index.getValor()));
                TUPLA.setD(String.valueOf(index.getValor()));

                String t1 = c3a.novavar(new Simbol("t1", index.getTipus(), (Integer) index.getValue()));
                c3a.genera("copy", index.getValue().toString(), buid, t1);
                String t2 = c3a.novavar(new Simbol("t2", (((Integer) index.getValue()) * nbytes)));
                c3a.genera("prod", t1, String.valueOf(nbytes), t2);
                TUPLA.setD(t2);

                RESULT = TUPLA;
            }else{
                print_this("Error semántico TUPLA_ACCESS");
                String e = ("El índice '" + index + "' de la tupla " + vid.getValue() + " no es correcto. Los índices de tupla solo permíten 0 o 1.");
                semantic_error(e, vindex);
            }
        }else{
            print_this("Error semántico TUPLA_ACCESS");
            String e = ("La tupla " + vid.getValue() + " no ha sido declarada.");
            semantic_error(e, vid);
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TUPLA_ACCESS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= integer 
            {
              Object RESULT =null;
		 print_this("Tipo integer"); RESULT = new Simbol("integer", TipusDades.INTEGER, 1);//1 valor per tipus integer 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= logical 
            {
              Object RESULT =null;
		 print_this("Tipo boolean"); RESULT = new Simbol("logical", TipusDades.BOOLEAN, 2);//2 valor per tipus boolean 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOG_TERM ::= EXP equal EXP 
            {
              Object RESULT =null;
		int vE1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vE1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vE2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vE2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vE2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LOG_TERM equal");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() == TipusDades.NULL || E2.getTipus() == TipusDades.NULL){
            print_this("Error semántico LOG_TERM");
            String e = ("Factor lógico vacío");
            if (E1.getTipus() == TipusDades.NULL){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }else{
            if(E1.getTipus() != E2.getTipus()){
                print_this("Error semántico LOG_TERM");
                String e = ("No se pueden comapar valores de diferente tipo");
                semantic_error(e, vE1);
            }else{
                print_this(E1.getValue() + " not_equal "+E2.getValue());

                int val = -3;
                if(E1.getValor() == E2.getValor()){
                    val = -1;
                }else{
                    val = 0;
                }
                E1.setTipus(TipusDades.BOOLEAN);
                E1.setValor(val);

                String t = c3a.novavar(E1);
                String e1 = c3a.novaetiqueta();
                String e2 = c3a.novaetiqueta();
                c3a.genera("if_EQ", E1.getR(), E2.getR(), e1);
                c3a.genera("copy", "0", buid, t);
                c3a.genera("goto", buid, buid, e2);
                c3a.genera("skip", buid, buid, e1);
                c3a.genera("copy", "-1", buid, t);
                c3a.genera("skip", buid, buid, e2);
                E1.setR(t);

                RESULT = E1;
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOG_TERM ::= EXP not_equal EXP 
            {
              Object RESULT =null;
		int vE1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vE1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vE2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vE2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vE2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LOG_TERM not equal");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() == TipusDades.NULL || E2.getTipus() == TipusDades.NULL){
            print_this("Error semántico LOG_TERM");
            String e = ("Factor lógico vacío");
            if (E1.getTipus() == TipusDades.NULL){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }else{
            if(E1.getTipus() != E2.getTipus()){
                print_this("Error semántico LOG_TERM");
                String e = ("No se pueden comapar valores de diferente tipo");
                semantic_error(e, vE1);
            }else{
                print_this(E1.getValue() + " not_equal "+E2.getValue());

                int val = -3;
                if(E1.getValor() != E2.getValor()){
                    val = -1;
                }else{
                    val = 0;
                }
                E1.setTipus(TipusDades.BOOLEAN);
                E1.setValor(val);

                String t = c3a.novavar(E1);
                String e1 = c3a.novaetiqueta();
                String e2 = c3a.novaetiqueta();
                c3a.genera("if_NE", E1.getR(), E2.getR(), e1);
                c3a.genera("copy", "0", buid, t);
                c3a.genera("goto", buid, buid, e2);
                c3a.genera("skip", buid, buid, e1);
                c3a.genera("copy", "-1", buid, t);
                c3a.genera("skip", buid, buid, e2);
                E1.setR(t);

                RESULT = E1;
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOG_TERM ::= EXP and EXP 
            {
              Object RESULT =null;
		int vE1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vE1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vE2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vE2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vE2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LOG_TERM and");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() != TipusDades.BOOLEAN || E2.getTipus() != TipusDades.BOOLEAN){
            print_this("Error semántico LOG_TERM");
            String e = ("En los términos lógicos solo se permiten valores booleanos");
            if (E1.getTipus() != TipusDades.BOOLEAN){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }else{
            print_this(E1.getValue() + " and " + E2.getValue());

            int val = (E1.getValor() == 0 ? 0 : (E1.getValor() == 0 ? 0 : -1)); //Si E1 false entonces false, sino si E2 false entonces false, sino true
            E1.setValor(val);

            String t1 = c3a.novavar(E1);
            String t2 = c3a.novavar(E1);
            String t3 = c3a.novavar(E2);
            String e1 = c3a.novaetiqueta();
            String e2 = c3a.novaetiqueta();
            String e3 = c3a.novaetiqueta();
            c3a.genera("copy", E1.getR(), buid, t1);
            c3a.genera("if_EQ", t1, "-1", e1);
            c3a.genera("copy", "0", buid, t2);
            c3a.genera("goto", buid, buid, e2);
            c3a.genera("skip", buid, buid, e1);
            c3a.genera("copy", E2.getR(), buid, t3);
            c3a.genera("if_EQ", t3, "-1", e3);
            c3a.genera("copy", "0", buid, t2);
            c3a.genera("goto", buid, buid, e2);
            c3a.genera("skip", buid, buid, e3);
            c3a.genera("copy", "-1", buid, t2);
            c3a.genera("skip", buid, buid, e2);
            E1.setR(t2);

            RESULT = E1;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOG_TERM ::= EXP or EXP 
            {
              Object RESULT =null;
		int vE1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vE1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vE2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vE2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vE2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en LOG_TERM or");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() != TipusDades.BOOLEAN || E2.getTipus() != TipusDades.BOOLEAN){
            print_this("Error semántico LOG_TERM");
            String e = ("En los términos lógicos solo se permiten valores booleanos");
            if (E1.getTipus() != TipusDades.BOOLEAN){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }else{
            print_this(E1.getValue() + " or " + E2.getValue());
            int val = (E1.getValor() == -1 ? -1 : (E1.getValor() == -1 ? -1 : 0)); //Si E1 true entonces true, sino si E2 true entonces true, sino false
            E1.setValor(val);

            String t1 = c3a.novavar(E1);
            String t2 = c3a.novavar(E1);
            String t3 = c3a.novavar(E2);
            String e1 = c3a.novaetiqueta();
            String e2 = c3a.novaetiqueta();
            String e3 = c3a.novaetiqueta();
            c3a.genera("copy", E1.getR(), buid, t1);
            c3a.genera("if_EQ", t1, "0", e1);
            c3a.genera("copy", "-1", buid, t2);
            c3a.genera("goto", buid, buid, e2);
            c3a.genera("skip", buid, buid, e1);
            c3a.genera("copy", E2.getR(), buid, t3);
            c3a.genera("if_EQ", t3, "0", e3);
            c3a.genera("copy", "-1", buid, t2);
            c3a.genera("goto", buid, buid, e2);
            c3a.genera("skip", buid, buid, e3);
            c3a.genera("copy", "0", buid, t2);
            c3a.genera("skip", buid, buid, e2);
            E1.setR(t2);

            RESULT = E1;
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOG_TERM",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARIT_TERM ::= EXP plus EXP 
            {
              Object RESULT =null;
		int vE1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vE1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vE2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vE2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vE2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ARIT_TERM +");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() == E2.getTipus() && E1.getTipus() ==  TipusDades.INTEGER){
            E1.setValor(E1.getValor()+E2.getValor());

            String t = c3a.novavar(E1);
            c3a.genera("add", E1.getR(), E2.getR(), t);
            E1.setR(t);

            RESULT = E1;
        }else{
            print_this("Error semántico ARIT_TERM");
            String e = ("El término aritmético solo puede sumar tipos integer: "+E1.getTipus().toString()+" + " + E2.getTipus().toString());
            if (E1.getTipus() != TipusDades.INTEGER){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARIT_TERM ::= EXP minus EXP 
            {
              Object RESULT =null;
		int vE1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vE1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vE1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vE2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vE2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vE2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en ARIT_TERM -");
    if(!error_detectat){
        Simbol E1 = (Simbol) vE1;
        E1 = E1.clone();
        Simbol E2 = (Simbol) vE2;
        if(E1.getTipus() == E2.getTipus() && E1.getTipus() ==  TipusDades.INTEGER){
            E1.setValor(E1.getValor()-E2.getValor());

            String t = c3a.novavar(E1);
            c3a.genera("sub", E1.getR(), E2.getR(), t);
            E1.setR(t);

            RESULT = E1;
        }else{
            print_this("Error semántico ARIT_TERM");
            String e = ("El término aritmético solo puede restar tipos integer");
            if (E1.getTipus() != TipusDades.INTEGER){
                semantic_error(e, vE1);
            }else{
                semantic_error(e, vE2);
            }
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARIT_TERM",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ENTR_FUNC ::= in lparen TIPO rparen 
            {
              Object RESULT =null;
		int vTIPOleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vTIPOright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object vTIPO = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    print_this("Estas en ENTR_FUNC");
    Simbol TIPO = (Simbol) vTIPO;
    TIPO = TIPO.clone();

    String d0 = c3a.novavar(TIPO);
    c3a.genera("copy", String.valueOf(TIPO.getValor()), buid, d0);
    String d1 = c3a.novavar(new Simbol());
    c3a.genera("in", d0, buid, d1);
    TIPO.setR(d1);

    RESULT = TIPO;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTR_FUNC",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CRID_SIMB ::= id 
            {
              Object RESULT =null;
		int vidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbol vid = (Simbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en CRID_SIMB id");
    VariableConstant id = taulaSimbols.usarVariableConstant(vid.getValue()); //d = consulta(ts, id.id);
    if(id.getValue() != ""){
        print_this("Se ha obtenido la variable o constante '" + id.getValue() + "' de tipo '" + id.getTipus() + "'");
        RESULT = id;
    }else{
        print_this("Error semántico EXP");
        String e = ("El símbolo llamado no ha sido declarado");
        semantic_error(e, vid);
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_SIMB",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CRID_SIMB ::= CRID_FUNC 
            {
              Object RESULT =null;
		int vCRID_FUNCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vCRID_FUNCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vCRID_FUNC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 print_this("Estas en CRID_SIMB funcion"); RESULT = vCRID_FUNC; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_SIMB",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CRID_SIMB ::= TUPLA_ACCESS 
            {
              Object RESULT =null;
		int vTUPLA_ACCESSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vTUPLA_ACCESSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vTUPLA_ACCESS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    print_this("Estas en CRID_SIMB tupla");
    Simbol TUPLA_ACCESS = (Simbol) vTUPLA_ACCESS;
    TUPLA_ACCESS = TUPLA_ACCESS.clone();

    String t = c3a.novavar(TUPLA_ACCESS);
    c3a.genera("idx_val", TUPLA_ACCESS.getR(), TUPLA_ACCESS.getD(), t); // idx_val R.r R.d t
    TUPLA_ACCESS.setR(t);
    TUPLA_ACCESS.setD("");

    RESULT = TUPLA_ACCESS;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRID_SIMB",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
